["^ ","~:output",["^ ","~:js","goog.provide('clojure.set');\ngoog.require('cljs.core');\nclojure.set.bubble_max_key = (function clojure$set$bubble_max_key(k,coll){\n\nvar max = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.max_key,k,coll);\nreturn cljs.core.cons(max,cljs.core.remove.cljs$core$IFn$_invoke$arity$2((function (p1__46696_SHARP_){\nreturn (max === p1__46696_SHARP_);\n}),coll));\n});\n/**\n * Return a set that is the union of the input sets\n */\nclojure.set.union = (function clojure$set$union(var_args){\nvar G__46707 = arguments.length;\nswitch (G__46707) {\ncase 0:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4810__auto__ = [];\nvar len__4789__auto___46859 = arguments.length;\nvar i__4790__auto___46860 = (0);\nwhile(true){\nif((i__4790__auto___46860 < len__4789__auto___46859)){\nargs_arr__4810__auto__.push((arguments[i__4790__auto___46860]));\n\nvar G__46863 = (i__4790__auto___46860 + (1));\ni__4790__auto___46860 = G__46863;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4811__auto__ = (new cljs.core.IndexedSeq(args_arr__4810__auto__.slice((2)),(0),null));\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4811__auto__);\n\n}\n});\n\n(clojure.set.union.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.core.PersistentHashSet.EMPTY;\n}));\n\n(clojure.set.union.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n}));\n\n(clojure.set.union.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s2,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s1,s2);\n}\n}));\n\n(clojure.set.union.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key(cljs.core.count,cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n}));\n\n/** @this {Function} */\n(clojure.set.union.cljs$lang$applyTo = (function (seq46703){\nvar G__46704 = cljs.core.first(seq46703);\nvar seq46703__$1 = cljs.core.next(seq46703);\nvar G__46705 = cljs.core.first(seq46703__$1);\nvar seq46703__$2 = cljs.core.next(seq46703__$1);\nvar self__4776__auto__ = this;\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__46704,G__46705,seq46703__$2);\n}));\n\n(clojure.set.union.cljs$lang$maxFixedArity = (2));\n\n/**\n * Return a set that is the intersection of the input sets\n */\nclojure.set.intersection = (function clojure$set$intersection(var_args){\nvar G__46727 = arguments.length;\nswitch (G__46727) {\ncase 1:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4810__auto__ = [];\nvar len__4789__auto___46891 = arguments.length;\nvar i__4790__auto___46892 = (0);\nwhile(true){\nif((i__4790__auto___46892 < len__4789__auto___46891)){\nargs_arr__4810__auto__.push((arguments[i__4790__auto___46892]));\n\nvar G__46895 = (i__4790__auto___46892 + (1));\ni__4790__auto___46892 = G__46895;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4811__auto__ = (new cljs.core.IndexedSeq(args_arr__4810__auto__.slice((2)),(0),null));\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4811__auto__);\n\n}\n});\n\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n}));\n\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nwhile(true){\nif((cljs.core.count(s2) < cljs.core.count(s1))){\nvar G__46907 = s2;\nvar G__46908 = s1;\ns1 = G__46907;\ns2 = G__46908;\ncontinue;\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (s1,s2){\nreturn (function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn result;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n}\n});})(s1,s2))\n,s1,s1);\n}\nbreak;\n}\n}));\n\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key((function (p1__46719_SHARP_){\nreturn (- cljs.core.count(p1__46719_SHARP_));\n}),cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.intersection,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n}));\n\n/** @this {Function} */\n(clojure.set.intersection.cljs$lang$applyTo = (function (seq46723){\nvar G__46724 = cljs.core.first(seq46723);\nvar seq46723__$1 = cljs.core.next(seq46723);\nvar G__46725 = cljs.core.first(seq46723__$1);\nvar seq46723__$2 = cljs.core.next(seq46723__$1);\nvar self__4776__auto__ = this;\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__46724,G__46725,seq46723__$2);\n}));\n\n(clojure.set.intersection.cljs$lang$maxFixedArity = (2));\n\n/**\n * Return a set that is the first set without elements of the remaining sets\n */\nclojure.set.difference = (function clojure$set$difference(var_args){\nvar G__46745 = arguments.length;\nswitch (G__46745) {\ncase 1:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4810__auto__ = [];\nvar len__4789__auto___46931 = arguments.length;\nvar i__4790__auto___46932 = (0);\nwhile(true){\nif((i__4790__auto___46932 < len__4789__auto___46931)){\nargs_arr__4810__auto__.push((arguments[i__4790__auto___46932]));\n\nvar G__46933 = (i__4790__auto___46932 + (1));\ni__4790__auto___46932 = G__46933;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4811__auto__ = (new cljs.core.IndexedSeq(args_arr__4810__auto__.slice((2)),(0),null));\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4811__auto__);\n\n}\n});\n\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n}));\n\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n} else {\nreturn result;\n}\n}),s1,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.disj,s1,s2);\n}\n}));\n\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.difference,s1,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(sets,s2));\n}));\n\n/** @this {Function} */\n(clojure.set.difference.cljs$lang$applyTo = (function (seq46739){\nvar G__46740 = cljs.core.first(seq46739);\nvar seq46739__$1 = cljs.core.next(seq46739);\nvar G__46741 = cljs.core.first(seq46739__$1);\nvar seq46739__$2 = cljs.core.next(seq46739__$1);\nvar self__4776__auto__ = this;\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__46740,G__46741,seq46739__$2);\n}));\n\n(clojure.set.difference.cljs$lang$maxFixedArity = (2));\n\n/**\n * Returns a set of the elements for which pred is true\n */\nclojure.set.select = (function clojure$set$select(pred,xset){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (s,k){\nif(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(k) : pred.call(null,k)))){\nreturn s;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(s,k);\n}\n}),xset,xset);\n});\n/**\n * Returns a rel of the elements of xrel with only the keys in ks\n */\nclojure.set.project = (function clojure$set$project(xrel,ks){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__46769_SHARP_){\nreturn cljs.core.select_keys(p1__46769_SHARP_,ks);\n}),xrel));\n});\n/**\n * Returns the map with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename_keys = (function clojure$set$rename_keys(map,kmap){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,p__46778){\nvar vec__46780 = p__46778;\nvar old = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__46780,(0),null);\nvar new$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__46780,(1),null);\nif(cljs.core.contains_QMARK_(map,old)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,new$,cljs.core.get.cljs$core$IFn$_invoke$arity$2(map,old));\n} else {\nreturn m;\n}\n}),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,map,cljs.core.keys(kmap)),kmap);\n});\n/**\n * Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename = (function clojure$set$rename(xrel,kmap){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__46783_SHARP_){\nreturn clojure.set.rename_keys(p1__46783_SHARP_,kmap);\n}),xrel));\n});\n/**\n * Returns a map of the distinct values of ks in the xrel mapped to a\n *   set of the maps in xrel with the corresponding values of ks.\n */\nclojure.set.index = (function clojure$set$index(xrel,ks){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,x){\nvar ik = cljs.core.select_keys(x,ks);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.PersistentHashSet.EMPTY),x));\n}),cljs.core.PersistentArrayMap.EMPTY,xrel);\n});\n/**\n * Returns the map with the vals mapped to the keys.\n */\nclojure.set.map_invert = (function clojure$set$map_invert(m){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m__$1,p__46794){\nvar vec__46795 = p__46794;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__46795,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__46795,(1),null);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m__$1,v,k);\n}),cljs.core.PersistentArrayMap.EMPTY,m);\n});\n/**\n * When passed 2 rels, returns the rel corresponding to the natural\n *   join. When passed an additional keymap, joins on the corresponding\n *   keys.\n */\nclojure.set.join = (function clojure$set$join(var_args){\nvar G__46804 = arguments.length;\nswitch (G__46804) {\ncase 2:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(clojure.set.join.cljs$core$IFn$_invoke$arity$2 = (function (xrel,yrel){\nif(((cljs.core.seq(xrel)) && (cljs.core.seq(yrel)))){\nvar ks = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(cljs.core.first(xrel))),cljs.core.set(cljs.core.keys(cljs.core.first(yrel))));\nvar vec__46811 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__46811,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__46811,(1),null);\nvar idx = clojure.set.index(r,ks);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret,x){\nvar found = (function (){var G__46819 = cljs.core.select_keys(x,ks);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__46819) : idx.call(null,G__46819));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__46799_SHARP_,p2__46800_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__46799_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__46800_SHARP_,x], 0)));\n}),ret,found);\n} else {\nreturn ret;\n}\n}),cljs.core.PersistentHashSet.EMPTY,s);\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n}));\n\n(clojure.set.join.cljs$core$IFn$_invoke$arity$3 = (function (xrel,yrel,km){\nvar vec__46823 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel,clojure.set.map_invert(km)], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel,km], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__46823,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__46823,(1),null);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__46823,(2),null);\nvar idx = clojure.set.index(r,cljs.core.vals(k));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret,x){\nvar found = (function (){var G__46828 = clojure.set.rename_keys(cljs.core.select_keys(x,cljs.core.keys(k)),k);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__46828) : idx.call(null,G__46828));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__46801_SHARP_,p2__46802_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__46801_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__46802_SHARP_,x], 0)));\n}),ret,found);\n} else {\nreturn ret;\n}\n}),cljs.core.PersistentHashSet.EMPTY,s);\n}));\n\n(clojure.set.join.cljs$lang$maxFixedArity = 3);\n\n/**\n * Is set1 a subset of set2?\n */\nclojure.set.subset_QMARK_ = (function clojure$set$subset_QMARK_(set1,set2){\nreturn (((cljs.core.count(set1) <= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__46833_SHARP_){\nreturn cljs.core.contains_QMARK_(set2,p1__46833_SHARP_);\n}),set1)));\n});\n/**\n * Is set1 a superset of set2?\n */\nclojure.set.superset_QMARK_ = (function clojure$set$superset_QMARK_(set1,set2){\nreturn (((cljs.core.count(set1) >= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__46838_SHARP_){\nreturn cljs.core.contains_QMARK_(set1,p1__46838_SHARP_);\n}),set2)));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/set.cljs","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",19,"~:doc","Set operations such as union/intersection.","~:author","Rich Hickey"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^U","~$goog","^V"],"~:seen",["^N",[]],"~:uses",null,"~:require-macros",["^ ","^U","^U"],"~:form",["~#list",["~$ns","^P"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^V","^U"]],"^R","^P","~:resource-id",["~:shadow.build.classpath/resource","clojure/set.cljs"],"~:compiled-at",1574887626083,"~:resource-name","clojure/set.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Set operations such as union/intersection.\"\n       :author \"Rich Hickey\"}\n       clojure.set)\n\n(defn- bubble-max-key [k coll]\n  \"Move a maximal element of coll according to fn k (which returns a number) \n   to the front of coll.\"\n  (let [max (apply max-key k coll)]\n    (cons max (remove #(identical? max %) coll))))\n\n(defn union\n  \"Return a set that is the union of the input sets\"\n  ([] #{})\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s1) (count s2))\n       (reduce conj s2 s1)\n       (reduce conj s1 s2)))\n  ([s1 s2 & sets]\n     (let [bubbled-sets (bubble-max-key count (conj sets s2 s1))]\n       (reduce into (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn intersection\n  \"Return a set that is the intersection of the input sets\"\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))\n  ([s1 s2 & sets] \n     (let [bubbled-sets (bubble-max-key #(- (count %)) (conj sets s2 s1))]\n       (reduce intersection (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn difference\n  \"Return a set that is the first set without elements of the remaining sets\"\n  ([s1] s1)\n  ([s1 s2] \n     (if (< (count s1) (count s2))\n       (reduce (fn [result item] \n                   (if (contains? s2 item) \n                     (disj result item) \n                     result))\n               s1 s1)\n       (reduce disj s1 s2)))\n  ([s1 s2 & sets] \n     (reduce difference s1 (conj sets s2))))\n\n\n(defn select\n  \"Returns a set of the elements for which pred is true\"\n  [pred xset]\n    (reduce (fn [s k] (if (pred k) s (disj s k)))\n            xset xset))\n\n(defn project\n  \"Returns a rel of the elements of xrel with only the keys in ks\"\n  [xrel ks]\n    (set (map #(select-keys % ks) xrel)))\n\n(defn rename-keys\n  \"Returns the map with the keys in kmap renamed to the vals in kmap\"\n  [map kmap]\n    (reduce\n     (fn [m [old new]]\n       (if (contains? map old)\n         (assoc m new (get map old))\n         m))\n     (apply dissoc map (keys kmap)) kmap))\n\n(defn rename\n  \"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\"\n  [xrel kmap]\n    (set (map #(rename-keys % kmap) xrel)))\n\n(defn index\n  \"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.\"\n  [xrel ks]\n    (reduce\n     (fn [m x]\n       (let [ik (select-keys x ks)]\n         (assoc m ik (conj (get m ik #{}) x))))\n     {} xrel))\n   \n(defn map-invert\n  \"Returns the map with the vals mapped to the keys.\"\n  [m] (reduce (fn [m [k v]] (assoc m v k)) {} m))\n\n(defn join\n  \"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.\"\n  ([xrel yrel] ;natural join\n   (if (and (seq xrel) (seq yrel))\n     (let [ks (intersection (set (keys (first xrel))) (set (keys (first yrel))))\n           [r s] (if (<= (count xrel) (count yrel))\n                   [xrel yrel]\n                   [yrel xrel])\n           idx (index r ks)]\n       (reduce (fn [ret x]\n                 (let [found (idx (select-keys x ks))]\n                   (if found\n                     (reduce #(conj %1 (merge %2 x)) ret found)\n                     ret)))\n               #{} s))\n     #{}))\n  ([xrel yrel km] ;arbitrary key mapping\n   (let [[r s k] (if (<= (count xrel) (count yrel))\n                   [xrel yrel (map-invert km)]\n                   [yrel xrel km])\n         idx (index r (vals k))]\n     (reduce (fn [ret x]\n               (let [found (idx (rename-keys (select-keys x (keys k)) k))]\n                 (if found\n                   (reduce #(conj %1 (merge %2 x)) ret found)\n                   ret)))\n             #{} s))))\n\n(defn subset? \n  \"Is set1 a subset of set2?\"\n  [set1 set2]\n  (and (<= (count set1) (count set2))\n       (every? #(contains? set2 %) set1)))\n\n(defn superset? \n  \"Is set1 a superset of set2?\"\n  [set1 set2]\n  (and (>= (count set1) (count set2))\n       (every? #(contains? set1 %) set2)))\n\n(comment\n(refer 'set)\n(def xs #{{:a 11 :b 1 :c 1 :d 4}\n         {:a 2 :b 12 :c 2 :d 6}\n         {:a 3 :b 3 :c 3 :d 8 :f 42}})\n\n(def ys #{{:a 11 :b 11 :c 11 :e 5}\n         {:a 12 :b 11 :c 12 :e 3}\n         {:a 3 :b 3 :c 3 :e 7 }})\n\n(join xs ys)\n(join xs (rename ys {:b :yb :c :yc}) {:a :a})\n\n(union #{:a :b :c} #{:c :d :e })\n(difference #{:a :b :c} #{:c :d :e})\n(intersection #{:a :b :c} #{:c :d :e})\n\n(index ys [:b]))\n\n","~:reader-features",["^N",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["clojure.set/bubble-max-key","k","coll","max","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/max-key","cljs.core/cons","p1__46696#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","var_args","G__46707","clojure.set/union","args-arr__4810__auto__","len__4789__auto__","i__4790__auto__","argseq__4811__auto__","cljs.core/IndexedSeq","seq46703","G__46704","cljs.core/first","cljs.core/next","G__46705","self__4776__auto__","s1","s2","cljs.core/count","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","sets","bubbled-sets","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","cljs.core/into","cljs.core/rest","G__46727","clojure.set/intersection","seq46723","G__46724","G__46725","result","item","cljs.core/contains?","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","p1__46719#","G__46745","clojure.set/difference","seq46739","G__46740","G__46741","cljs.core/disj","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.set/select","pred","xset","s","clojure.set/project","xrel","ks","cljs.core/set","p1__46769#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/select-keys","clojure.set/rename-keys","map","kmap","p__46778","vec__46780","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","m","old","new","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/dissoc","cljs.core/keys","clojure.set/rename","p1__46783#","clojure.set/index","x","ik","cljs.core.get.cljs$core$IFn$_invoke$arity$3","clojure.set/map-invert","p__46794","vec__46795","v","G__46804","clojure.set/join","js/Error","yrel","cljs.core/seq","vec__46811","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","r","idx","ret","found","G__46819","p1__46799#","p2__46800#","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","km","vec__46823","cljs.core/vals","G__46828","p1__46801#","p2__46802#","clojure.set/subset?","set1","set2","p1__46833#","cljs.core/every?","clojure.set/superset?","p1__46838#"]]],"~:cache-keys",["~#cmap",[["^15","goog/dom/tagname.js"],[1573405241748,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^N",[]],"~:deps-syms",["^V","~$goog.dom.HtmlElement"]]],["^15","goog/math/math.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","~$goog.array","~$goog.asserts"]]],["^15","goog/html/trustedtypes.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V"]]],["^15","goog/labs/useragent/browser.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1G","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^15","goog/html/safeurl.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1H","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^1K"]]],["^15","goog/array/array.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1H"]]],["^15","goog/debug/error.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V"]]],["^15","goog/dom/nodetype.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V"]]],["^15","goog/string/typedstring.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V"]]],["^15","goog/object/object.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V"]]],["^15","goog/dom/asserts.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1H"]]],"~:SHADOW-TIMESTAMP",[1574887467000,1574197727000],["^15","goog/math/long.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1H","~$goog.reflect"]]],["^15","goog/html/trustedresourceurl.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1H","~$goog.html.trustedtypes","^1N","^1O","^1P","^1Q"]]],["^15","goog/string/internal.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V"]]],["^15","goog/functions/functions.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V"]]],["^15","goog/html/safestyle.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1G","^1H","~$goog.html.SafeUrl","^1P","^1Q","^1K"]]],["^15","goog/dom/safe.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1H","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^1U","^1M","~$goog.html.uncheckedconversions","^1P","^1K"]]],["^15","goog/structs/map.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^15","goog/html/safehtml.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1G","^1H","~$goog.dom.TagName","~$goog.dom.tags","^1Y","^1Z","~$goog.html.SafeStyleSheet","^1U","^1M","^1T","^1N","^1O","~$goog.labs.userAgent.browser","^1J","^1P","^1Q","^1K"]]],["^15","goog/dom/tags.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1J"]]],["^15","goog/asserts/asserts.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^15","goog/uri/uri.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1G","^1H","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^15","goog/i18n/bidi.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V"]]],["^15","goog/fs/url.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V"]]],["^15","goog/base.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",[]]],["^15","goog/structs/structs.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1G","^1J"]]],["^15","goog/string/string.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","~$goog.dom.safe","^1[","^1P","^1K"]]],["^15","goog/reflect/reflect.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V"]]],["^15","goog/labs/useragent/util.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1K"]]],["^15","goog/string/stringbuffer.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V"]]],["^15","goog/iter/iter.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1G","^1H","^1W","~$goog.math"]]],["^15","goog/html/uncheckedconversions.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1H","^1X","^1Y","^1Z","^24","^1U","^1M","^1P","^1K"]]],["^15","goog/dom/htmlelement.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V"]]],["^15","cljs/core.cljs"],[1574197727924,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["~$goog.math.Long","~$goog.math.Integer","^28","^1J","^1G","~$goog.Uri","~$goog.string.StringBuffer"]]],["^15","goog/html/safescript.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1H","^1T","^1P","^1Q"]]],["^15","goog/html/safestylesheet.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1G","^1H","^1Z","^1J","^1P","^1Q","^1K"]]],["^15","goog/math/integer.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1S"]]],["^15","clojure/set.cljs"],[1574197727924,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^U"]]],["^15","goog/uri/utils.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1G","^1H","^28"]]],["^15","goog/string/const.js"],[1573405241748,"^1B",["^ ","^1C",null,"^1D",["^N",[]],"^1E",["^V","^1H","^1Q"]]]]],"~:clj-info",["^ ","jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1573392977000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1574197727000,"jar:file:/Users/ecakir/.m2/repository/binaryage/devtools/0.9.11/devtools-0.9.11.jar!/devtools/defaults.clj",1574887467000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1573392984000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1573392977000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1573392977000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1573392977000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1573392984000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1573392977000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1573392977000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1573392984000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1573392984000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1573392984000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1573392984000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1573392984000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1574197727000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/set.cljs","^7",11,"^8",8,"^9",11,"^:",19,"^;","Set operations such as union/intersection.","^<","Rich Hickey"],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K"],"^L",null,"^M",["^N",[]],"^O","^P","^S",null,"^T",["^ ","^U","^U","^V","^V"],"^W",["^N",[]],"~:shadow/js-access-global",["^N",["Error"]],"^X",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/set.cljs","^7",19,"^8",7,"^9",19,"^:",12,"~:arglists",["^[",["~$quote",["^[",[[],["~$s1"],["^39","~$s2"],["^39","^3:","~$&","~$sets"]]]]],"^;","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",["^[",[[],["^39"],["^39","^3:"]]],"^37",["^[",[[],["^39"],["^39","^3:"],["^39","^3:","~$&","^3;"]]],"~:arglists-meta",["^[",[null,null,null,null]]]],"^O","~$clojure.set/union","^6","clojure/set.cljs","^:",12,"^3<",["^ ","^3=",true,"^3>",2,"^3?",2,"^3@",["^[",[[],["^39"],["^39","^3:"]]],"^37",["^[",[[],["^39"],["^39","^3:"],["^39","^3:","~$&","^3;"]]],"^3A",["^[",[null,null,null,null]]],"^3@",["^[",[[],["^39"],["^39","^3:"]]],"~:protocol-impl",null,"^3>",2,"^3A",["^[",[null,null,null,null]],"^8",1,"^3=",true,"~:methods",[["^ ","^3>",0,"^3=",false,"~:tag","~$cljs.core/ISet"],["^ ","^3>",1,"^3=",false],["^ ","^3>",2,"^3=",false,"^3E",["^N",[null,"~$any"]]],["^ ","^3>",2,"^3=",true,"^3E",["^N",[null,"^3G"]]]],"^7",19,"^9",19,"^3?",2,"~:fn-var",true,"^37",["^[",[[],["^39"],["^39","^3:"],["^39","^3:","~$&","^3;"]]],"^;","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^36",null,"^5",["^ ","^6","clojure/set.cljs","^7",97,"^8",7,"^9",97,"^:",17,"^37",["^[",["^38",["^[",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"^O","~$clojure.set/map-invert","^6","clojure/set.cljs","^:",17,"^3@",["^[",[["~$m"]]],"^3C",null,"^3A",["^[",[null,null]],"^8",1,"^3=",false,"^7",97,"~:ret-tag",["^N",[null,"^3G"]],"^9",97,"^3?",1,"^3H",true,"^37",["^[",["^38",["^[",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^36",null,"^5",["^ ","^6","clojure/set.cljs","^7",101,"^8",7,"^9",101,"^:",11,"^37",["^[",["^38",["^[",[["~$xrel","~$yrel"],["^3M","^3N","~$km"]]]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^3<",["^ ","^3=",false,"^3>",3,"^3?",3,"^3@",["^[",[["^3M","^3N"],["^3M","^3N","^3O"]]],"^37",["^[",[["^3M","^3N"],["^3M","^3N","^3O"]]],"^3A",["^[",[null,null]]]],"^O","~$clojure.set/join","^6","clojure/set.cljs","^:",11,"^3<",["^ ","^3=",false,"^3>",3,"^3?",3,"^3@",["^[",[["^3M","^3N"],["^3M","^3N","^3O"]]],"^37",["^[",[["^3M","^3N"],["^3M","^3N","^3O"]]],"^3A",["^[",[null,null]]],"^3@",["^[",[["^3M","^3N"],["^3M","^3N","^3O"]]],"^3C",null,"^3>",3,"^3A",["^[",[null,null]],"^8",1,"^3=",false,"^3D",[["^ ","^3>",2,"^3=",false,"^3E",["^N",[null,"^3G","^3F"]]],["^ ","^3>",3,"^3=",false,"^3E",["^N",[null,"^3G"]]]],"^7",101,"^9",101,"^3?",3,"^3H",true,"^37",["^[",[["^3M","^3N"],["^3M","^3N","^3O"]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^36",null,"^5",["^ ","^6","clojure/set.cljs","^7",61,"^8",7,"^9",61,"^:",13,"^37",["^[",["^38",["^[",[["~$pred","~$xset"]]]]],"^;","Returns a set of the elements for which pred is true"],"^O","~$clojure.set/select","^6","clojure/set.cljs","^:",13,"^3@",["^[",[["^3R","^3S"]]],"^3C",null,"^3A",["^[",[null,null]],"^8",1,"^3=",false,"^7",61,"^3K",["^N",[null,"^3G"]],"^9",61,"^3?",2,"^3H",true,"^37",["^[",["^38",["^[",[["^3R","^3S"]]]]],"^;","Returns a set of the elements for which pred is true"],"~$intersection",["^ ","^36",null,"^5",["^ ","^6","clojure/set.cljs","^7",31,"^8",7,"^9",31,"^:",19,"^37",["^[",["^38",["^[",[["^39"],["^39","^3:"],["^39","^3:","~$&","^3;"]]]]],"^;","Return a set that is the intersection of the input sets","^3<",["^ ","^3=",true,"^3>",2,"^3?",2,"^3@",["^[",[["^39"],["^39","^3:"]]],"^37",["^[",[["^39"],["^39","^3:"],["^39","^3:","~$&","^3;"]]],"^3A",["^[",[null,null,null]]]],"^O","~$clojure.set/intersection","^6","clojure/set.cljs","^:",19,"^3<",["^ ","^3=",true,"^3>",2,"^3?",2,"^3@",["^[",[["^39"],["^39","^3:"]]],"^37",["^[",[["^39"],["^39","^3:"],["^39","^3:","~$&","^3;"]]],"^3A",["^[",[null,null,null]]],"^3@",["^[",[["^39"],["^39","^3:"]]],"^3C",null,"^3>",2,"^3A",["^[",[null,null,null]],"^8",1,"^3=",true,"^3D",[["^ ","^3>",1,"^3=",false],["^ ","^3>",2,"^3=",false,"^3E",["^N",[null,"^3G"]]],["^ ","^3>",2,"^3=",true,"^3E",["^N",[null,"^3G"]]]],"^7",31,"^9",31,"^3?",2,"^3H",true,"^37",["^[",[["^39"],["^39","^3:"],["^39","^3:","~$&","^3;"]]],"^;","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^36",null,"^5",["^ ","^6","clojure/set.cljs","^7",137,"^8",7,"^9",137,"^:",16,"^37",["^[",["^38",["^[",[["~$set1","~$set2"]]]]],"^;","Is set1 a superset of set2?"],"^O","~$clojure.set/superset?","^6","clojure/set.cljs","^:",16,"^3@",["^[",[["^3X","^3Y"]]],"^3C",null,"^3A",["^[",[null,null]],"^8",1,"^3=",false,"^7",137,"^3K","~$boolean","^9",137,"^3?",2,"^3H",true,"^37",["^[",["^38",["^[",[["^3X","^3Y"]]]]],"^;","Is set1 a superset of set2?"],"~$index",["^ ","^36",null,"^5",["^ ","^6","clojure/set.cljs","^7",87,"^8",7,"^9",87,"^:",12,"^37",["^[",["^38",["^[",[["^3M","~$ks"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^O","~$clojure.set/index","^6","clojure/set.cljs","^:",12,"^3@",["^[",[["^3M","^41"]]],"^3C",null,"^3A",["^[",[null,null]],"^8",1,"^3=",false,"^7",87,"^3K",["^N",[null,"^3G"]],"^9",87,"^3?",2,"^3H",true,"^37",["^[",["^38",["^[",[["^3M","^41"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"~$bubble-max-key",["^ ","^36",null,"^5",["^ ","^6","clojure/set.cljs","^7",13,"^8",8,"^9",13,"^:",22,"~:private",true,"^37",["^[",["^38",["^[",[["~$k","~$coll"]]]]]],"^44",true,"^O","~$clojure.set/bubble-max-key","^6","clojure/set.cljs","^:",22,"^3@",["^[",[["~$k","^45"]]],"^3C",null,"^3A",["^[",[null,null]],"^8",1,"^3=",false,"^7",13,"^3K","~$clj","^9",13,"^3?",2,"^3H",true,"^37",["^[",["^38",["^[",[["~$k","^45"]]]]]],"~$subset?",["^ ","^36",null,"^5",["^ ","^6","clojure/set.cljs","^7",131,"^8",7,"^9",131,"^:",14,"^37",["^[",["^38",["^[",[["^3X","^3Y"]]]]],"^;","Is set1 a subset of set2?"],"^O","~$clojure.set/subset?","^6","clojure/set.cljs","^:",14,"^3@",["^[",[["^3X","^3Y"]]],"^3C",null,"^3A",["^[",[null,null]],"^8",1,"^3=",false,"^7",131,"^3K","^3[","^9",131,"^3?",2,"^3H",true,"^37",["^[",["^38",["^[",[["^3X","^3Y"]]]]],"^;","Is set1 a subset of set2?"],"~$rename",["^ ","^36",null,"^5",["^ ","^6","clojure/set.cljs","^7",82,"^8",7,"^9",82,"^:",13,"^37",["^[",["^38",["^[",[["^3M","~$kmap"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^O","~$clojure.set/rename","^6","clojure/set.cljs","^:",13,"^3@",["^[",[["^3M","^4;"]]],"^3C",null,"^3A",["^[",[null,null]],"^8",1,"^3=",false,"^7",82,"^3K",["^N",["^47","^3G","^3F","~$cljs.core/MetaFn","~$clj-nil"]],"^9",82,"^3?",2,"^3H",true,"^37",["^[",["^38",["^[",[["^3M","^4;"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"~$rename-keys",["^ ","^36",null,"^5",["^ ","^6","clojure/set.cljs","^7",72,"^8",7,"^9",72,"^:",18,"^37",["^[",["^38",["^[",[["~$map","^4;"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"^O","~$clojure.set/rename-keys","^6","clojure/set.cljs","^:",18,"^3@",["^[",[["^4@","^4;"]]],"^3C",null,"^3A",["^[",[null,null]],"^8",1,"^3=",false,"^7",72,"^3K",["^N",[null,"^3G"]],"^9",72,"^3?",2,"^3H",true,"^37",["^[",["^38",["^[",[["^4@","^4;"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^36",null,"^5",["^ ","^6","clojure/set.cljs","^7",67,"^8",7,"^9",67,"^:",14,"^37",["^[",["^38",["^[",[["^3M","^41"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"^O","~$clojure.set/project","^6","clojure/set.cljs","^:",14,"^3@",["^[",[["^3M","^41"]]],"^3C",null,"^3A",["^[",[null,null]],"^8",1,"^3=",false,"^7",67,"^3K",["^N",["^47","^3G","^3F","^4=","^4>"]],"^9",67,"^3?",2,"^3H",true,"^37",["^[",["^38",["^[",[["^3M","^41"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^36",null,"^5",["^ ","^6","clojure/set.cljs","^7",46,"^8",7,"^9",46,"^:",17,"^37",["^[",["^38",["^[",[["^39"],["^39","^3:"],["^39","^3:","~$&","^3;"]]]]],"^;","Return a set that is the first set without elements of the remaining sets","^3<",["^ ","^3=",true,"^3>",2,"^3?",2,"^3@",["^[",[["^39"],["^39","^3:"]]],"^37",["^[",[["^39"],["^39","^3:"],["^39","^3:","~$&","^3;"]]],"^3A",["^[",[null,null,null]]]],"^O","~$clojure.set/difference","^6","clojure/set.cljs","^:",17,"^3<",["^ ","^3=",true,"^3>",2,"^3?",2,"^3@",["^[",[["^39"],["^39","^3:"]]],"^37",["^[",[["^39"],["^39","^3:"],["^39","^3:","~$&","^3;"]]],"^3A",["^[",[null,null,null]]],"^3@",["^[",[["^39"],["^39","^3:"]]],"^3C",null,"^3>",2,"^3A",["^[",[null,null,null]],"^8",1,"^3=",true,"^3D",[["^ ","^3>",1,"^3=",false],["^ ","^3>",2,"^3=",false,"^3E",["^N",[null,"^3G"]]],["^ ","^3>",2,"^3=",true,"^3E",["^N",[null,"^3G"]]]],"^7",46,"^9",46,"^3?",2,"^3H",true,"^37",["^[",[["^39"],["^39","^3:"],["^39","^3:","~$&","^3;"]]],"^;","Return a set that is the first set without elements of the remaining sets"]],"^Y",["^ ","^U","^U"],"^11",["^ "],"^12",["^ "],"^13",["^V","^U"]],"^R","^P","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1A",[["^4H","~:static-fns"],true,["^4H","~:elide-asserts"],false,["^4H","~:optimize-constants"],null,["^4H","^18"],null,["^4H","~:external-config"],null,["^4H","~:tooling-config"],null,["^4H","~:emit-constants"],null,["^4H","~:load-tests"],null,["^4H","~:form-size-threshold"],null,["^4H","~:infer-externs"],true,["^4H","^1:"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4H","~:fn-invoke-direct"],null,["^4H","~:source-map"],"/dev/null"]]]
["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.zip.editz');\ngoog.require('cljs.core');\ngoog.require('rewrite_clj.zip.base');\ngoog.require('rewrite_clj.zip.move');\ngoog.require('rewrite_clj.zip.removez');\ngoog.require('rewrite_clj.zip.utils');\ngoog.require('rewrite_clj.zip.whitespace');\ngoog.require('rewrite_clj.node');\ngoog.require('clojure.zip');\n/**\n * Replace the node at the given location with one representing\n * the given value. (The value will be coerced to a node if\n * possible.)\n */\nrewrite_clj.zip.editz.replace = (function rewrite_clj$zip$editz$replace(zloc,value){\nreturn clojure.zip.replace(zloc,(rewrite_clj.node.coerce.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.coerce.cljs$core$IFn$_invoke$arity$1(value) : rewrite_clj.node.coerce.call(null,value)));\n});\n/**\n * Create s-expression from node, apply the function and create\n * node from the result.\n */\nrewrite_clj.zip.editz.edit_node = (function rewrite_clj$zip$editz$edit_node(node,f){\nvar G__57371 = (function (){var G__57372 = (rewrite_clj.node.sexpr.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.sexpr.cljs$core$IFn$_invoke$arity$1(node) : rewrite_clj.node.sexpr.call(null,node));\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__57372) : f.call(null,G__57372));\n})();\nreturn (rewrite_clj.node.coerce.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.coerce.cljs$core$IFn$_invoke$arity$1(G__57371) : rewrite_clj.node.coerce.call(null,G__57371));\n});\n/**\n * Apply the given function to the s-expression at the given\n * location, using its result to replace the node there. (The\n * result will be coerced to a node if possible.)\n */\nrewrite_clj.zip.editz.edit = (function rewrite_clj$zip$editz$edit(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___57399 = arguments.length;\nvar i__4790__auto___57400 = (0);\nwhile(true){\nif((i__4790__auto___57400 < len__4789__auto___57399)){\nargs__4795__auto__.push((arguments[i__4790__auto___57400]));\n\nvar G__57401 = (i__4790__auto___57400 + (1));\ni__4790__auto___57400 = G__57401;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((2) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((2)),(0),null)):null);\nreturn rewrite_clj.zip.editz.edit.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4796__auto__);\n});\n\n(rewrite_clj.zip.editz.edit.cljs$core$IFn$_invoke$arity$variadic = (function (zloc,f,args){\nreturn clojure.zip.edit.cljs$core$IFn$_invoke$arity$variadic(zloc,rewrite_clj.zip.editz.edit_node,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (p1__57373_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,p1__57373_SHARP_,args);\n})], 0));\n}));\n\n(rewrite_clj.zip.editz.edit.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(rewrite_clj.zip.editz.edit.cljs$lang$applyTo = (function (seq57374){\nvar G__57375 = cljs.core.first(seq57374);\nvar seq57374__$1 = cljs.core.next(seq57374);\nvar G__57376 = cljs.core.first(seq57374__$1);\nvar seq57374__$2 = cljs.core.next(seq57374__$1);\nvar self__4776__auto__ = this;\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__57375,G__57376,seq57374__$2);\n}));\n\n/**\n * Splice the given node, i.e. merge its children into the current one\n * (akin to Clojure's `unquote-splicing` macro: `~@...`).\n * - if the node is not one that can have children, no modification will\n *   be performed.\n * - if the node has no or only whitespace children, it will be removed.\n * - otherwise, splicing will be performed, moving the zipper to the first\n *   non-whitespace child afterwards.\n * \n */\nrewrite_clj.zip.editz.splice = (function rewrite_clj$zip$editz$splice(zloc){\nif(cljs.core.truth_(clojure.zip.branch_QMARK_(zloc))){\nvar temp__5733__auto__ = cljs.core.seq(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.whitespace_QMARK_,cljs.core.reverse(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.whitespace_QMARK_,clojure.zip.children(zloc)))));\nif(temp__5733__auto__){\nvar children = temp__5733__auto__;\nvar loc = rewrite_clj.zip.utils.remove_and_move_right(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.zip.insert_right,zloc,children));\nvar or__4185__auto__ = rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$1(loc);\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn loc;\n}\n} else {\nreturn rewrite_clj.zip.removez.remove(zloc);\n}\n} else {\nreturn zloc;\n}\n});\nrewrite_clj.zip.editz.edit_token = (function rewrite_clj$zip$editz$edit_token(zloc,str_fn){\nvar e = rewrite_clj.zip.base.sexpr(zloc);\nvar e_SINGLEQUOTE_ = ((typeof e === 'string')?(str_fn.cljs$core$IFn$_invoke$arity$1 ? str_fn.cljs$core$IFn$_invoke$arity$1(e) : str_fn.call(null,e)):(((e instanceof cljs.core.Keyword))?cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(cljs.core.namespace(e),(function (){var G__57383 = cljs.core.name(e);\nreturn (str_fn.cljs$core$IFn$_invoke$arity$1 ? str_fn.cljs$core$IFn$_invoke$arity$1(G__57383) : str_fn.call(null,G__57383));\n})()):(((e instanceof cljs.core.Symbol))?cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.namespace(e),(function (){var G__57384 = cljs.core.name(e);\nreturn (str_fn.cljs$core$IFn$_invoke$arity$1 ? str_fn.cljs$core$IFn$_invoke$arity$1(G__57384) : str_fn.call(null,G__57384));\n})()):null)));\nreturn clojure.zip.replace(zloc,(rewrite_clj.node.token_node.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.token_node.cljs$core$IFn$_invoke$arity$1(e_SINGLEQUOTE_) : rewrite_clj.node.token_node.call(null,e_SINGLEQUOTE_)));\n});\nrewrite_clj.zip.editz.edit_multi_line = (function rewrite_clj$zip$editz$edit_multi_line(zloc,line_fn){\nvar n = cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(clojure.zip.node(zloc),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"lines\",\"lines\",-700165781)], null),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(line_fn,cljs.core.vec));\nreturn clojure.zip.replace(zloc,n);\n});\nrewrite_clj.zip.editz.prefix = (function rewrite_clj$zip$editz$prefix(zloc,s){\nvar G__57390 = rewrite_clj.zip.base.tag(zloc);\nvar G__57390__$1 = (((G__57390 instanceof cljs.core.Keyword))?G__57390.fqn:null);\nswitch (G__57390__$1) {\ncase \"token\":\nreturn rewrite_clj.zip.editz.edit_token(zloc,(function (p1__57387_SHARP_){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__57387_SHARP_)].join('');\n}));\n\nbreak;\ncase \"multi-line\":\nreturn rewrite_clj.zip.editz.edit_multi_line(zloc,(function (lines){\nif(cljs.core.empty_QMARK_(lines)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);\n} else {\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(lines,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0)], null),(function (p1__57388_SHARP_){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__57388_SHARP_)].join('');\n}));\n}\n}));\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__57390__$1)].join('')));\n\n}\n});\nrewrite_clj.zip.editz.suffix = (function rewrite_clj$zip$editz$suffix(zloc,s){\nvar G__57394 = rewrite_clj.zip.base.tag(zloc);\nvar G__57394__$1 = (((G__57394 instanceof cljs.core.Keyword))?G__57394.fqn:null);\nswitch (G__57394__$1) {\ncase \"token\":\nreturn rewrite_clj.zip.editz.edit_token(zloc,(function (p1__57393_SHARP_){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__57393_SHARP_),cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join('');\n}));\n\nbreak;\ncase \"multi-line\":\nreturn rewrite_clj.zip.editz.edit_multi_line(zloc,(function (lines){\nif(cljs.core.empty_QMARK_(lines)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);\n} else {\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.butlast(lines),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.last(lines)),cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join(''));\n}\n}));\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__57394__$1)].join('')));\n\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/zip/editz.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",26],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",["~$replace"]],"~:name","~$rewrite-clj.zip.editz","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$base","~$rewrite-clj.zip.base","~$rewrite-clj.zip.removez","^V","~$clojure.zip","^W","~$rewrite-clj.node","^X","~$u","~$rewrite-clj.zip.utils","~$r","^V","~$cljs.core","^Z","~$ws","~$rewrite-clj.zip.whitespace","~$goog","^11","~$n","^X","~$m","~$rewrite-clj.zip.move","^10","^10","^12","^12","~$z","^W","^Y","^Y","^U","^U"],"~:seen",["^L",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^Z","^Z"],"~:form",["~#list",["~$ns","^O",["^18",["~:refer-clojure","~:exclude",["^M"]]],["^18",["^14",["^U","~:as","^T"],["^12","^1<","~$m"],["^V","^1<","~$r"],["^Y","^1<","~$u"],["^10","^1<","^["],["^X","^1<","~$n"],["^W","^1<","~$z"]]]]],"~:flags",["^ ","^14",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^11","^Z","^U","^12","^V","^Y","^10","^X","^W"]],"^Q","^O","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/zip/editz.cljs"],"~:compiled-at",1574887630080,"~:resource-name","rewrite_clj/zip/editz.cljs","~:warnings",[],"~:source","(ns rewrite-clj.zip.editz\n  (:refer-clojure :exclude [replace])\n  (:require [rewrite-clj.zip.base :as base]\n            [rewrite-clj.zip.move :as m]\n            [rewrite-clj.zip.removez :as r]\n            [rewrite-clj.zip.utils :as u]\n            [rewrite-clj.zip.whitespace :as ws]\n            [rewrite-clj.node :as n]\n            [clojure.zip :as z]))\n\n;; ## In-Place Modification\n\n(defn replace\n  \"Replace the node at the given location with one representing\n   the given value. (The value will be coerced to a node if\n   possible.)\"\n  [zloc value]\n  (z/replace zloc (n/coerce value)))\n\n(defn- edit-node\n  \"Create s-expression from node, apply the function and create\n   node from the result.\"\n  [node f]\n  (-> (n/sexpr node)\n      (f)\n      (n/coerce)))\n\n(defn edit\n  \"Apply the given function to the s-expression at the given\n   location, using its result to replace the node there. (The\n   result will be coerced to a node if possible.)\"\n  [zloc f & args]\n  (z/edit zloc edit-node #(apply f % args)))\n\n;; ## Splice\n\n\n\n(defn splice\n  \"Splice the given node, i.e. merge its children into the current one\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace child afterwards.\n   \"\n  [zloc]\n  (if (z/branch? zloc)\n    (if-let [children (->> (z/children zloc)\n                           (drop-while n/whitespace?)\n                           (reverse)\n                           (drop-while n/whitespace?)\n                           (seq))]\n      (let [loc (->> (reduce z/insert-right zloc children)\n                     (u/remove-and-move-right))]\n        (or (ws/skip-whitespace loc) loc))\n      (r/remove zloc))\n    zloc))\n\n;; ## Prefix/Suffix\n\n(defn- edit-token\n  [zloc str-fn]\n  (let [e (base/sexpr zloc)\n        e' (cond (string? e) (str-fn e)\n                 (keyword? e) (keyword (namespace e) (str-fn (name e)))\n                 (symbol? e) (symbol (namespace e) (str-fn (name e))))]\n    (z/replace zloc (n/token-node e'))))\n\n(defn- edit-multi-line\n  [zloc line-fn]\n  (let [n (-> (z/node zloc)\n              (update-in [:lines] (comp line-fn vec)))]\n    (z/replace zloc n)))\n\n(defn prefix\n  [zloc s]\n  (case (base/tag zloc)\n    :token      (edit-token zloc #(str s %))\n    :multi-line (->> (fn [lines]\n                       (if (empty? lines)\n                         [s]\n                         (update-in lines [0] #(str s %))))\n                     (edit-multi-line zloc ))))\n\n(defn suffix\n  [zloc s]\n  (case (base/tag zloc)\n    :token      (edit-token zloc #(str % s))\n    :multi-line (->> (fn [lines]\n                       (if (empty? lines)\n                         [s]\n                         (concat (butlast lines) (str (last lines) s))))\n                     (edit-multi-line zloc))))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["rewrite-clj.zip.editz/replace","zloc","value","clojure.zip/replace","rewrite-clj.node/coerce","rewrite-clj.zip.editz/edit-node","node","f","rewrite-clj.node/sexpr","G__57372","G__57371","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","rewrite-clj.zip.editz/edit","seq57374","G__57375","cljs.core/first","cljs.core/next","G__57376","self__4776__auto__","args","p1__57373#","clojure.zip.edit.cljs$core$IFn$_invoke$arity$variadic","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","rewrite-clj.zip.editz/splice","clojure.zip/branch?","temp__5733__auto__","children","clojure.zip/children","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node/whitespace?","cljs.core/reverse","cljs.core/seq","loc","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","clojure.zip/insert-right","rewrite-clj.zip.utils/remove-and-move-right","or__4185__auto__","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$1","rewrite-clj.zip.removez/remove","rewrite-clj.zip.editz/edit-token","str-fn","e","rewrite-clj.zip.base/sexpr","e'","cljs.core/Keyword","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","cljs.core/namespace","G__57383","cljs.core/name","cljs.core/Symbol","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","G__57384","rewrite-clj.node/token-node","rewrite-clj.zip.editz/edit-multi-line","line-fn","n","clojure.zip/node","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","rewrite-clj.zip.editz/prefix","s","G__57390","js/Error","rewrite-clj.zip.base/tag","p1__57387#","lines","cljs.core/empty?","p1__57388#","rewrite-clj.zip.editz/suffix","G__57394","p1__57393#","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/butlast","cljs.core/last"]]],"~:cache-keys",["~#cmap",[["^1A","goog/dom/tagname.js"],[1573405241748,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^11","~$goog.dom.HtmlElement"]]],["^1A","rewrite_clj/node/token.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","~$rewrite-clj.node.protocols"]]],["^1A","cljs/tools/reader/impl/utils.cljs"],[1573392977666,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","~$clojure.string","~$goog.string"]]],["^1A","goog/math/math.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","~$goog.array","~$goog.asserts"]]],["^1A","rewrite_clj/parser/core.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^X","~$rewrite-clj.reader","~$rewrite-clj.parser.keyword","~$rewrite-clj.parser.string","~$rewrite-clj.parser.token","~$rewrite-clj.parser.whitespace","~$cljs.tools.reader.reader-types"]]],["^1A","rewrite_clj/parser/string.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^X","^1X","^1U"]]],["^1A","goog/html/trustedtypes.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11"]]],["^1A","goog/labs/useragent/browser.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^1V","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1A","goog/html/safeurl.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^1W","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^24"]]],["^1A","goog/array/array.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^1W"]]],["^1A","rewrite_clj/zip/move.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^10","^W"]]],["^1A","goog/debug/error.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11"]]],["^1A","rewrite_clj/zip/editz.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^U","^12","^V","^Y","^10","^X","^W"]]],["^1A","goog/dom/nodetype.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11"]]],["^1A","cljs/tools/reader/impl/inspect.cljs"],[1573392977666,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z"]]],["^1A","cljs/tools/reader.cljs"],[1573392977666,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^21","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader.impl.errors","^1V","^1U","~$goog.string.StringBuffer"]]],["^1A","rewrite_clj/node/forms.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^1S"]]],["^1A","goog/string/typedstring.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11"]]],["^1A","rewrite_clj/zip/utils.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^W"]]],["^1A","goog/object/object.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11"]]],["^1A","goog/dom/asserts.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^1W"]]],"~:SHADOW-TIMESTAMP",[1574887467000,1574197727000],["^1A","goog/math/long.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^1W","~$goog.reflect"]]],["^1A","rewrite_clj/node/reader_macro.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^1S","~$rewrite-clj.node.whitespace"]]],["^1A","goog/html/trustedresourceurl.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^1W","~$goog.html.trustedtypes","^27","^28","^29","^2:"]]],["^1A","goog/string/internal.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11"]]],["^1A","goog/functions/functions.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11"]]],["^1A","goog/html/safestyle.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^1V","^1W","~$goog.html.SafeUrl","^29","^2:","^24"]]],["^1A","goog/dom/safe.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^1W","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^2C","^26","~$goog.html.uncheckedconversions","^29","^24"]]],["^1A","clojure/walk.cljs"],[1574197727924,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z"]]],["^1A","goog/structs/map.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1A","rewrite_clj/node/meta.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^1S","^2A"]]],["^1A","goog/html/safehtml.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^1V","^1W","~$goog.dom.TagName","~$goog.dom.tags","^2G","^2H","~$goog.html.SafeStyleSheet","^2C","^26","^2B","^27","^28","~$goog.labs.userAgent.browser","^23","^29","^2:","^24"]]],["^1A","goog/dom/tags.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^23"]]],["^1A","rewrite_clj/node/stringz.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^1S","~$cljs.tools.reader","^1T"]]],["^1A","rewrite_clj/node/comment.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^1S"]]],["^1A","rewrite_clj/node/keyword.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^1S"]]],["^1A","goog/asserts/asserts.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1A","goog/uri/uri.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^1V","^1W","^1U","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1A","goog/i18n/bidi.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11"]]],["^1A","rewrite_clj/node/protocols.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^1T"]]],["^1A","rewrite_clj/node/seq.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^1S"]]],["^1A","rewrite_clj/node/uneval.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^1S"]]],["^1A","goog/fs/url.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11"]]],["^1A","goog/base.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",[]]],["^1A","goog/structs/structs.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^1V","^23"]]],["^1A","cljs/tools/reader/impl/errors.cljs"],[1573392977666,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^21","^1T","~$cljs.tools.reader.impl.inspect"]]],["^1A","rewrite_clj/node/whitespace.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^1S"]]],["^1A","rewrite_clj/node/coercer.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","~$rewrite-clj.node.comment","~$rewrite-clj.node.forms","~$rewrite-clj.node.keyword","~$rewrite-clj.node.quote","~$rewrite-clj.node.stringz","~$rewrite-clj.node.uneval","~$rewrite-clj.node.meta","~$rewrite-clj.node.fn","^1S","~$rewrite-clj.node.reader-macro","~$rewrite-clj.node.seq","~$rewrite-clj.node.token","^2A"]]],["^1A","clojure/string.cljs"],[1574197727924,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^1U","^2>"]]],["^1A","rewrite_clj/parser.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","~$rewrite-clj.parser.core","^X","^1X"]]],["^1A","rewrite_clj/parser/keyword.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^X","^21","^1X"]]],["^1A","rewrite_clj/parser/token.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^X","^1X","^1U"]]],["^1A","goog/string/string.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","~$goog.dom.safe","^2I","^29","^24"]]],["^1A","goog/reflect/reflect.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11"]]],["^1A","rewrite_clj/node/fn.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^1S","~$clojure.walk"]]],["^1A","goog/labs/useragent/util.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^24"]]],["^1A","rewrite_clj/node.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","~$rewrite-clj.node.coercer","^1S","^2[","^36","^2A","^37","^2Y","^2Z","^33","^31","^35","^30","^32","^34"]]],["^1A","rewrite_clj/zip/removez.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^12","^Y","^10","^W"]]],["^1A","clojure/zip.cljs"],[1574197727924,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z"]]],["^1A","goog/string/stringbuffer.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11"]]],["^1A","cljs/tools/reader/reader_types.cljs"],[1573392977666,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^2;","^1U","^2>"]]],["^1A","goog/iter/iter.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^1V","^1W","^2E","~$goog.math"]]],["^1A","goog/html/uncheckedconversions.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^1W","^2F","^2G","^2H","^2N","^2C","^26","^29","^24"]]],["^1A","rewrite_clj/reader.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^2P","^21","^2<","^1U","^1S"]]],["^1A","rewrite_clj/node/quote.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^1S"]]],["^1A","cljs/tools/reader/impl/commons.cljs"],[1573392977666,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^2=","^21","^2;"]]],["^1A","goog/dom/htmlelement.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11"]]],["^1A","cljs/core.cljs"],[1574197727924,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["~$goog.math.Long","~$goog.math.Integer","^1U","^23","^1V","~$goog.Uri","^2>"]]],["^1A","goog/html/safescript.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^1W","^2B","^29","^2:"]]],["^1A","goog/html/safestylesheet.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^1V","^1W","^2H","^23","^29","^2:","^24"]]],["^1A","goog/math/integer.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^2@"]]],["^1A","goog/uri/utils.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^1V","^1W","^1U"]]],["^1A","goog/string/const.js"],[1573405241748,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^1W","^2:"]]],["^1A","rewrite_clj/zip/base.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^X","~$rewrite-clj.parser","^10","^W"]]],["^1A","rewrite_clj/zip/whitespace.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^X","^W"]]],["^1A","rewrite_clj/parser/whitespace.cljs"],[1574887468164,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^11","^Z","^X","^1X"]]]]],"~:clj-info",["^ ","jar:file:/Users/ecakir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1573392977000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1573392977000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1574197727000,"jar:file:/Users/ecakir/.m2/repository/binaryage/devtools/0.9.11/devtools-0.9.11.jar!/devtools/defaults.clj",1574887467000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1573392984000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1573392977000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1573392977000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1573392977000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1573392984000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1573392977000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1573392977000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1573392984000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1573392984000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1573392984000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1573392984000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1574197727000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1573392984000,"jar:file:/Users/ecakir/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1574197727000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",1,"^8",5,"^9",1,"^:",26],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",["^M"]],"^N","^O","^R",null,"^S",["^ ","^T","^U","^V","^V","^W","^W","^X","^X","~$u","^Y","~$r","^V","^Z","^Z","^[","^10","^11","^11","~$n","^X","~$m","^12","^10","^10","^12","^12","~$z","^W","^Y","^Y","^U","^U"],"^13",["^L",["^14"]],"~:shadow/js-access-global",["^L",["Error"]],"^15",null,"~:defs",["^ ","^M",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",13,"^8",7,"^9",13,"^:",14,"~:arglists",["^18",["~$quote",["^18",[["~$zloc","~$value"]]]]],"~:doc","Replace the node at the given location with one representing\n   the given value. (The value will be coerced to a node if\n   possible.)"],"^N","~$rewrite-clj.zip.editz/replace","^6","rewrite_clj/zip/editz.cljs","^:",14,"~:method-params",["^18",[["^46","^47"]]],"~:protocol-impl",null,"~:arglists-meta",["^18",[null,null]],"^8",1,"~:variadic?",false,"^7",13,"~:ret-tag",["^L",["~$clj","~$cljs.core/MetaFn","~$clj-nil"]],"^9",13,"~:max-fixed-arity",2,"~:fn-var",true,"^44",["^18",["^45",["^18",[["^46","^47"]]]]],"^48","Replace the node at the given location with one representing\n   the given value. (The value will be coerced to a node if\n   possible.)"],"~$edit-node",["^ ","^43",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",20,"^8",8,"^9",20,"^:",17,"~:private",true,"^44",["^18",["^45",["^18",[["~$node","~$f"]]]]],"^48","Create s-expression from node, apply the function and create\n   node from the result."],"^4E",true,"^N","~$rewrite-clj.zip.editz/edit-node","^6","rewrite_clj/zip/editz.cljs","^:",17,"^4:",["^18",[["^4F","~$f"]]],"^4;",null,"^4<",["^18",[null,null]],"^8",1,"^4=",false,"^7",20,"^4>","~$any","^9",20,"^4B",2,"^4C",true,"^44",["^18",["^45",["^18",[["^4F","~$f"]]]]],"^48","Create s-expression from node, apply the function and create\n   node from the result."],"~$edit",["^ ","^43",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",28,"^8",7,"^9",28,"^:",11,"^44",["^18",["^45",["^18",[["^46","~$f","~$&","~$args"]]]]],"^48","Apply the given function to the s-expression at the given\n   location, using its result to replace the node there. (The\n   result will be coerced to a node if possible.)","~:top-fn",["^ ","^4=",true,"~:fixed-arity",2,"^4B",2,"^4:",[["^18",["^46","~$f","^4J"]]],"^44",["^18",[["^46","~$f","~$&","^4J"]]],"^4<",["^18",[null]]]],"^N","~$rewrite-clj.zip.editz/edit","^6","rewrite_clj/zip/editz.cljs","^:",11,"^4K",["^ ","^4=",true,"^4L",2,"^4B",2,"^4:",[["^18",["^46","~$f","^4J"]]],"^44",["^18",[["^46","~$f","~$&","^4J"]]],"^4<",["^18",[null]]],"^4:",[["^18",["^46","~$f","^4J"]]],"^4;",null,"^4L",2,"^4<",["^18",[null]],"^8",1,"^4=",true,"~:methods",[["^ ","^4L",2,"^4=",true,"~:tag",["^L",["^4?","^4@","^4A"]]]],"^7",28,"^4>","^4H","^9",28,"^4B",2,"^4C",true,"^44",["^18",[["^46","~$f","~$&","^4J"]]],"^48","Apply the given function to the s-expression at the given\n   location, using its result to replace the node there. (The\n   result will be coerced to a node if possible.)"],"~$splice",["^ ","^43",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",39,"^8",7,"^9",39,"^:",13,"^44",["^18",["^45",["^18",[["^46"]]]]],"^48","Splice the given node, i.e. merge its children into the current one\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace child afterwards.\n   "],"^N","~$rewrite-clj.zip.editz/splice","^6","rewrite_clj/zip/editz.cljs","^:",13,"^4:",["^18",[["^46"]]],"^4;",null,"^4<",["^18",[null,null]],"^8",1,"^4=",false,"^7",39,"^4>",["^L",[null,"^4?","^4H","^4@","^4A"]],"^9",39,"^4B",1,"^4C",true,"^44",["^18",["^45",["^18",[["^46"]]]]],"^48","Splice the given node, i.e. merge its children into the current one\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace child afterwards.\n   "],"~$edit-token",["^ ","^43",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",63,"^8",8,"^9",63,"^:",18,"^4E",true,"^44",["^18",["^45",["^18",[["^46","~$str-fn"]]]]]],"^4E",true,"^N","~$rewrite-clj.zip.editz/edit-token","^6","rewrite_clj/zip/editz.cljs","^:",18,"^4:",["^18",[["^46","^4S"]]],"^4;",null,"^4<",["^18",[null,null]],"^8",1,"^4=",false,"^7",63,"^4>",["^L",["^4?","^4@","^4A"]],"^9",63,"^4B",2,"^4C",true,"^44",["^18",["^45",["^18",[["^46","^4S"]]]]]],"~$edit-multi-line",["^ ","^43",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",71,"^8",8,"^9",71,"^:",23,"^4E",true,"^44",["^18",["^45",["^18",[["^46","~$line-fn"]]]]]],"^4E",true,"^N","~$rewrite-clj.zip.editz/edit-multi-line","^6","rewrite_clj/zip/editz.cljs","^:",23,"^4:",["^18",[["^46","^4V"]]],"^4;",null,"^4<",["^18",[null,null]],"^8",1,"^4=",false,"^7",71,"^4>",["^L",["^4?","^4@","^4A"]],"^9",71,"^4B",2,"^4C",true,"^44",["^18",["^45",["^18",[["^46","^4V"]]]]]],"~$prefix",["^ ","^43",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",77,"^8",7,"^9",77,"^:",13,"^44",["^18",["^45",["^18",[["^46","~$s"]]]]]],"^N","~$rewrite-clj.zip.editz/prefix","^6","rewrite_clj/zip/editz.cljs","^:",13,"^4:",["^18",[["^46","~$s"]]],"^4;",null,"^4<",["^18",[null,null]],"^8",1,"^4=",false,"^7",77,"^9",77,"^4B",2,"^4C",true,"^44",["^18",["^45",["^18",[["^46","~$s"]]]]]],"~$suffix",["^ ","^43",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",87,"^8",7,"^9",87,"^:",13,"^44",["^18",["^45",["^18",[["^46","~$s"]]]]]],"^N","~$rewrite-clj.zip.editz/suffix","^6","rewrite_clj/zip/editz.cljs","^:",13,"^4:",["^18",[["^46","~$s"]]],"^4;",null,"^4<",["^18",[null,null]],"^8",1,"^4=",false,"^7",87,"^9",87,"^4B",2,"^4C",true,"^44",["^18",["^45",["^18",[["^46","~$s"]]]]]]],"^16",["^ ","^Z","^Z"],"~:cljs.analyzer/constants",["^ ","^13",["^L",["~:lines"]],"~:order",["^51"]],"^1=",["^ ","^14",["^L",[]]],"^1>",["^ "],"^1?",["^11","^Z","^U","^12","^V","^Y","^10","^X","^W"]],"^Q","^O","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1M",[["^55","~:static-fns"],true,["^55","~:elide-asserts"],false,["^55","~:optimize-constants"],null,["^55","^1D"],null,["^55","~:external-config"],null,["^55","~:tooling-config"],null,["^55","~:emit-constants"],null,["^55","~:load-tests"],null,["^55","~:form-size-threshold"],null,["^55","~:infer-externs"],true,["^55","^1F"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^55","~:fn-invoke-direct"],null,["^55","~:source-map"],"/dev/null"]]]
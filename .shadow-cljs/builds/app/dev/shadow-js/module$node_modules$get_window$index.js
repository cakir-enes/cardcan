["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/get-window/index.js"],"~:js","shadow$provide.module$node_modules$get_window$index=function(global,require,module,exports){var getDocument=require(\"module$node_modules$get_document$index\");module.exports=function(node){if(node&&node.window===node)return node;node=getDocument(node);if(needsIEFallback){node.parentWindow.execScript(\"document._parentWindow \\x3d window;\",\"Javascript\");var win=node._parentWindow;node._parentWindow=null;return win}return node.defaultView||node.parentWindow};var needsIEFallback=require(\"module$node_modules$get_window$needs_ie_fallback_br\")}","~:source","shadow$provide[\"module$node_modules$get_window$index\"] = function(global,require,module,exports) {\n\n/**\n * Module dependencies.\n */\n\nvar getDocument = require('get-document');\n\n/**\n * Module exports.\n */\n\nmodule.exports = getWindow;\n\nvar needsIEFallback = require('./needs-ie-fallback');\n\n/**\n * Returns `true` if `w` is a Window object, or `false` otherwise.\n *\n * @param {Mixed} w - Window object, maybe\n * @return {Boolean}\n * @private\n */\n\nfunction isWindow (w) {\n  return w && w.window === w;\n}\n\n/**\n * Returns the `window` object associated with the given `node`, which may be\n * a DOM element, the Window object, a Selection, a Range. Basically any DOM\n * object that references the Window in some way, this function will find it.\n *\n * @param {Mixed} node - DOM node, selection, or range in which to find the `window` object\n * @return {Window} the `window` object associated with `node`\n * @public\n */\n\nfunction getWindow(node) {\n  if (isWindow(node)) {\n    return node;\n  }\n\n  var doc = getDocument(node);\n\n  if (needsIEFallback) {\n    // In IE 6-8, only the variable 'window' can be used to connect events (others\n    // may be only copies).\n    doc.parentWindow.execScript('document._parentWindow = window;', 'Javascript');\n    var win = doc._parentWindow;\n    // to prevent memory leak, unset it after use\n    // another possibility is to add an onUnload handler,\n    // (which seems overkill to @liucougar)\n    doc._parentWindow = null;\n    return win;\n  } else {\n    // standards-compliant and newer IE\n    return doc.defaultView || doc.parentWindow;\n  }\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$get_document$index","~$shadow.js","~$module$node_modules$get_window$needs_ie_fallback_br"]],"~:properties",["^5",["_parentWindow"]],"~:compiled-at",1574889105349,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$get_window$index.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,qCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAMjG,IAAIC,YAAcH,OAAA,CAAQ,wCAAR,CAMlBC,OAAAC,QAAA,CA0BAE,QAAkB,CAACC,IAAD,CAAO,CACvB,GAAaA,IAAb,EAAaA,IAdDC,OAcZ,GAAaD,IAAb,CACE,MAAOA,KAGLE,KAAAA,CAAMJ,WAAA,CAAYE,IAAZ,CAEV,IAAIG,eAAJ,CAAqB,CAGnBD,IAAAE,aAAAC,WAAA,CAA4B,qCAA5B,CAAgE,YAAhE,CACA,KAAIC,IAAMJ,IAAAK,cAIVL,KAAAK,cAAA,CAAoB,IACpB,OAAOD,IATY,CAYnB,MAAOJ,KAAAM,YAAP,EAA0BN,IAAAE,aAnBL,CAxBzB,KAAID,gBAAkBR,OAAA,CAAQ,qDAAR,CAd2E;\",\n\"sources\":[\"node_modules/get-window/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$get_window$index\\\"] = function(global,require,module,exports) {\\n\\n/**\\n * Module dependencies.\\n */\\n\\nvar getDocument = require('get-document');\\n\\n/**\\n * Module exports.\\n */\\n\\nmodule.exports = getWindow;\\n\\nvar needsIEFallback = require('./needs-ie-fallback');\\n\\n/**\\n * Returns `true` if `w` is a Window object, or `false` otherwise.\\n *\\n * @param {Mixed} w - Window object, maybe\\n * @return {Boolean}\\n * @private\\n */\\n\\nfunction isWindow (w) {\\n  return w && w.window === w;\\n}\\n\\n/**\\n * Returns the `window` object associated with the given `node`, which may be\\n * a DOM element, the Window object, a Selection, a Range. Basically any DOM\\n * object that references the Window in some way, this function will find it.\\n *\\n * @param {Mixed} node - DOM node, selection, or range in which to find the `window` object\\n * @return {Window} the `window` object associated with `node`\\n * @public\\n */\\n\\nfunction getWindow(node) {\\n  if (isWindow(node)) {\\n    return node;\\n  }\\n\\n  var doc = getDocument(node);\\n\\n  if (needsIEFallback) {\\n    // In IE 6-8, only the variable 'window' can be used to connect events (others\\n    // may be only copies).\\n    doc.parentWindow.execScript('document._parentWindow = window;', 'Javascript');\\n    var win = doc._parentWindow;\\n    // to prevent memory leak, unset it after use\\n    // another possibility is to add an onUnload handler,\\n    // (which seems overkill to @liucougar)\\n    doc._parentWindow = null;\\n    return win;\\n  } else {\\n    // standards-compliant and newer IE\\n    return doc.defaultView || doc.parentWindow;\\n  }\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"getDocument\",\"getWindow\",\"node\",\"window\",\"doc\",\"needsIEFallback\",\"parentWindow\",\"execScript\",\"win\",\"_parentWindow\",\"defaultView\"]\n}\n"]
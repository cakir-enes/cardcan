["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/slate-plain-serializer/lib/slate-plain-serializer.js"],"~:js","shadow$provide.module$node_modules$slate_plain_serializer$lib$slate_plain_serializer=function(global,require,module,exports){function serializeNode(node){var _options$delimiter2=(1<arguments.length&&void 0!==arguments[1]?arguments[1]:{}).delimiter;_options$delimiter2=void 0===_options$delimiter2?\"\\n\":_options$delimiter2;return\"document\"===node.object||\"block\"===node.object&&slate.Block.isBlockList(node.nodes)?node.nodes.map(serializeNode).join(_options$delimiter2):node.text}Object.defineProperty(exports,\n\"__esModule\",{value:!0});var slate=require(\"module$node_modules$slate$lib$slate\"),immutable=require(\"module$node_modules$immutable$dist$immutable\"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i],key;for(key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};exports.default={deserialize:function(string){var options=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},_options$defaultBlock=options.defaultBlock,\ndefaultBlock=void 0===_options$defaultBlock?\"line\":_options$defaultBlock;_options$defaultBlock=options.defaultMarks;var defaultMarks=void 0===_options$defaultBlock?[]:_options$defaultBlock;_options$defaultBlock=options.delimiter;_options$defaultBlock=void 0===_options$defaultBlock?\"\\n\":_options$defaultBlock;options=options.toJSON;options=void 0===options?!1:options;immutable.Set.isSet(defaultMarks)&&(defaultMarks=defaultMarks.toArray());defaultBlock=slate.Node.createProperties(defaultBlock);defaultMarks=\ndefaultMarks.map(slate.Mark.createProperties);_options$defaultBlock={object:\"value\",document:{object:\"document\",data:{},nodes:string.split(_options$defaultBlock).map(function(line){return _extends({},defaultBlock,{object:\"block\",data:{},nodes:[{object:\"text\",text:line,marks:defaultMarks}]})})}};return options?_options$defaultBlock:slate.Value.fromJSON(_options$defaultBlock)},serialize:function(value){return serializeNode(value.document,1<arguments.length&&void 0!==arguments[1]?arguments[1]:{})}}}","~:source","shadow$provide[\"module$node_modules$slate_plain_serializer$lib$slate_plain_serializer\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar slate = require('slate');\nvar immutable = require('immutable');\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Deserialize a plain text `string` to a Slate value.\n *\n * @param {String} string\n * @param {Object} options\n *   @property {Boolean} toJSON\n *   @property {String|Object|Block} defaultBlock\n *   @property {Array|Set} defaultMarks\n * @return {Value}\n */\n\nfunction deserialize(string) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$defaultBlock = options.defaultBlock,\n      defaultBlock = _options$defaultBlock === undefined ? 'line' : _options$defaultBlock,\n      _options$defaultMarks = options.defaultMarks,\n      defaultMarks = _options$defaultMarks === undefined ? [] : _options$defaultMarks,\n      _options$delimiter = options.delimiter,\n      delimiter = _options$delimiter === undefined ? '\\n' : _options$delimiter,\n      _options$toJSON = options.toJSON,\n      toJSON = _options$toJSON === undefined ? false : _options$toJSON;\n\n\n  if (immutable.Set.isSet(defaultMarks)) {\n    defaultMarks = defaultMarks.toArray();\n  }\n\n  defaultBlock = slate.Node.createProperties(defaultBlock);\n  defaultMarks = defaultMarks.map(slate.Mark.createProperties);\n\n  var json = {\n    object: 'value',\n    document: {\n      object: 'document',\n      data: {},\n      nodes: string.split(delimiter).map(function (line) {\n        return _extends({}, defaultBlock, {\n          object: 'block',\n          data: {},\n          nodes: [{\n            object: 'text',\n            text: line,\n            marks: defaultMarks\n          }]\n        });\n      })\n    }\n  };\n\n  var ret = toJSON ? json : slate.Value.fromJSON(json);\n  return ret;\n}\n\n/**\n * Serialize a Slate `value` to a plain text string.\n *\n * @param {Value} value\n * @return {String}\n */\n\nfunction serialize(value) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  return serializeNode(value.document, options);\n}\n\n/**\n * Serialize a `node` to plain text.\n *\n * @param {Node} node\n * @return {String}\n */\n\nfunction serializeNode(node) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$delimiter2 = options.delimiter,\n      delimiter = _options$delimiter2 === undefined ? '\\n' : _options$delimiter2;\n\n\n  if (node.object === 'document' || node.object === 'block' && slate.Block.isBlockList(node.nodes)) {\n    return node.nodes.map(serializeNode).join(delimiter);\n  } else {\n    return node.text;\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nvar index = {\n  deserialize: deserialize,\n  serialize: serialize\n};\n\nexports.default = index;\n//# sourceMappingURL=slate-plain-serializer.js.map\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$immutable$dist$immutable","~$module$node_modules$slate$lib$slate"]],"~:properties",["^5",["object","serialize","__esModule","marks","document","value","text","nodes","data","default","deserialize"]],"~:compiled-at",1574889105353,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$slate_plain_serializer$lib$slate_plain_serializer.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/slate-plain-serializer/lib/slate-plain-serializer.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$slate_plain_serializer$lib$slate_plain_serializer\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nvar slate = require('slate');\\nvar immutable = require('immutable');\\n\\nvar _extends = Object.assign || function (target) {\\n  for (var i = 1; i < arguments.length; i++) {\\n    var source = arguments[i];\\n\\n    for (var key in source) {\\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\\n        target[key] = source[key];\\n      }\\n    }\\n  }\\n\\n  return target;\\n};\\n\\n/**\\n * Deserialize a plain text `string` to a Slate value.\\n *\\n * @param {String} string\\n * @param {Object} options\\n *   @property {Boolean} toJSON\\n *   @property {String|Object|Block} defaultBlock\\n *   @property {Array|Set} defaultMarks\\n * @return {Value}\\n */\\n\\nfunction deserialize(string) {\\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n  var _options$defaultBlock = options.defaultBlock,\\n      defaultBlock = _options$defaultBlock === undefined ? 'line' : _options$defaultBlock,\\n      _options$defaultMarks = options.defaultMarks,\\n      defaultMarks = _options$defaultMarks === undefined ? [] : _options$defaultMarks,\\n      _options$delimiter = options.delimiter,\\n      delimiter = _options$delimiter === undefined ? '\\\\n' : _options$delimiter,\\n      _options$toJSON = options.toJSON,\\n      toJSON = _options$toJSON === undefined ? false : _options$toJSON;\\n\\n\\n  if (immutable.Set.isSet(defaultMarks)) {\\n    defaultMarks = defaultMarks.toArray();\\n  }\\n\\n  defaultBlock = slate.Node.createProperties(defaultBlock);\\n  defaultMarks = defaultMarks.map(slate.Mark.createProperties);\\n\\n  var json = {\\n    object: 'value',\\n    document: {\\n      object: 'document',\\n      data: {},\\n      nodes: string.split(delimiter).map(function (line) {\\n        return _extends({}, defaultBlock, {\\n          object: 'block',\\n          data: {},\\n          nodes: [{\\n            object: 'text',\\n            text: line,\\n            marks: defaultMarks\\n          }]\\n        });\\n      })\\n    }\\n  };\\n\\n  var ret = toJSON ? json : slate.Value.fromJSON(json);\\n  return ret;\\n}\\n\\n/**\\n * Serialize a Slate `value` to a plain text string.\\n *\\n * @param {Value} value\\n * @return {String}\\n */\\n\\nfunction serialize(value) {\\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n\\n  return serializeNode(value.document, options);\\n}\\n\\n/**\\n * Serialize a `node` to plain text.\\n *\\n * @param {Node} node\\n * @return {String}\\n */\\n\\nfunction serializeNode(node) {\\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n  var _options$delimiter2 = options.delimiter,\\n      delimiter = _options$delimiter2 === undefined ? '\\\\n' : _options$delimiter2;\\n\\n\\n  if (node.object === 'document' || node.object === 'block' && slate.Block.isBlockList(node.nodes)) {\\n    return node.nodes.map(serializeNode).join(delimiter);\\n  } else {\\n    return node.text;\\n  }\\n}\\n\\n/**\\n * Export.\\n *\\n * @type {Object}\\n */\\n\\nvar index = {\\n  deserialize: deserialize,\\n  serialize: serialize\\n};\\n\\nexports.default = index;\\n//# sourceMappingURL=slate-plain-serializer.js.map\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"serializeNode\",\"node\",\"_options$delimiter2\",\"delimiter\",\"options\",\"arguments\",\"length\",\"undefined\",\"object\",\"slate\",\"Block\",\"isBlockList\",\"nodes\",\"map\",\"join\",\"text\",\"Object\",\"defineProperty\",\"value\",\"immutable\",\"_extends\",\"assign\",\"target\",\"i\",\"source\",\"key\",\"prototype\",\"hasOwnProperty\",\"call\",\"default\",\"index\",\"deserialize\",\"string\",\"_options$defaultBlock\",\"defaultBlock\",\"_options$defaultMarks\",\"defaultMarks\",\"_options$delimiter\",\"_options$toJSON\",\"toJSON\",\"Set\",\"isSet\",\"toArray\",\"Node\",\"createProperties\",\"Mark\",\"json\",\"document\",\"data\",\"split\",\"line\",\"marks\",\"ret\",\"Value\",\"fromJSON\",\"serialize\"]\n}\n"]
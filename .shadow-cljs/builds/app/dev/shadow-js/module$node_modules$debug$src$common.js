["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/debug/src/common.js"],"~:js","shadow$provide.module$node_modules$debug$src$common=function(global,require,module,exports){module.exports=function(env){function selectColor(namespace){for(var hash=0,i=0;i<namespace.length;i++)hash=(hash<<5)-hash+namespace.charCodeAt(i),hash|=0;return createDebug.colors[Math.abs(hash)%createDebug.colors.length]}function createDebug(namespace){function debug(){if(debug.enabled){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];_len=Number(new Date);\ndebug.diff=_len-(prevTime||_len);debug.prev=prevTime;prevTime=debug.curr=_len;args[0]=createDebug.coerce(args[0]);\"string\"!==typeof args[0]&&args.unshift(\"%O\");var index=0;args[0]=args[0].replace(/%([a-zA-Z%])/g,function(match,format){if(\"%%\"===match)return match;index++;format=createDebug.formatters[format];\"function\"===typeof format&&(match=format.call(debug,args[index]),args.splice(index,1),index--);return match});createDebug.formatArgs.call(debug,args);(debug.log||createDebug.log).apply(debug,\nargs)}}var prevTime;debug.namespace=namespace;debug.enabled=createDebug.enabled(namespace);debug.useColors=createDebug.useColors();debug.color=selectColor(namespace);debug.destroy=destroy;debug.extend=extend;\"function\"===typeof createDebug.init&&createDebug.init(debug);createDebug.instances.push(debug);return debug}function destroy(){var index=createDebug.instances.indexOf(this);return-1!==index?(createDebug.instances.splice(index,1),!0):!1}function extend(namespace,delimiter){return createDebug(this.namespace+\n(\"undefined\"===typeof delimiter?\":\":delimiter)+namespace)}createDebug.debug=createDebug;createDebug.default=createDebug;createDebug.coerce=function(val){return val instanceof Error?val.stack||val.message:val};createDebug.disable=function(){createDebug.enable(\"\")};createDebug.enable=function(namespaces){createDebug.save(namespaces);createDebug.names=[];createDebug.skips=[];var i,split=(\"string\"===typeof namespaces?namespaces:\"\").split(/[\\s,]+/),len=split.length;for(i=0;i<len;i++)split[i]&&(namespaces=\nsplit[i].replace(/\\*/g,\".*?\"),\"-\"===namespaces[0]?createDebug.skips.push(new RegExp(\"^\"+namespaces.substr(1)+\"$\")):createDebug.names.push(new RegExp(\"^\"+namespaces+\"$\")));for(i=0;i<createDebug.instances.length;i++)namespaces=createDebug.instances[i],namespaces.enabled=createDebug.enabled(namespaces.namespace)};createDebug.enabled=function(name){if(\"*\"===name[name.length-1])return!0;var len;var i=0;for(len=createDebug.skips.length;i<len;i++)if(createDebug.skips[i].test(name))return!1;i=0;for(len=createDebug.names.length;i<\nlen;i++)if(createDebug.names[i].test(name))return!0;return!1};createDebug.humanize=require(\"module$node_modules$ms$index\");Object.keys(env).forEach(function(key){createDebug[key]=env[key]});createDebug.instances=[];createDebug.names=[];createDebug.skips=[];createDebug.formatters={};createDebug.selectColor=selectColor;createDebug.enable(createDebug.load());return createDebug}}","~:source","shadow$provide[\"module$node_modules$debug$src$common\"] = function(global,require,module,exports) {\n\"use strict\";\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\nfunction setup(env) {\n  createDebug.debug = createDebug;\n  createDebug.default = createDebug;\n  createDebug.coerce = coerce;\n  createDebug.disable = disable;\n  createDebug.enable = enable;\n  createDebug.enabled = enabled;\n  createDebug.humanize = require('ms');\n  Object.keys(env).forEach(function (key) {\n    createDebug[key] = env[key];\n  });\n  /**\n  * Active `debug` instances.\n  */\n\n  createDebug.instances = [];\n  /**\n  * The currently active debug mode names, and names to skip.\n  */\n\n  createDebug.names = [];\n  createDebug.skips = [];\n  /**\n  * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n  *\n  * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n  */\n\n  createDebug.formatters = {};\n  /**\n  * Selects a color for a debug namespace\n  * @param {String} namespace The namespace string for the for the debug instance to be colored\n  * @return {Number|String} An ANSI color code for the given namespace\n  * @api private\n  */\n\n  function selectColor(namespace) {\n    var hash = 0;\n\n    for (var i = 0; i < namespace.length; i++) {\n      hash = (hash << 5) - hash + namespace.charCodeAt(i);\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n  }\n\n  createDebug.selectColor = selectColor;\n  /**\n  * Create a debugger with the given `namespace`.\n  *\n  * @param {String} namespace\n  * @return {Function}\n  * @api public\n  */\n\n  function createDebug(namespace) {\n    var prevTime;\n\n    function debug() {\n      // Disabled?\n      if (!debug.enabled) {\n        return;\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var self = debug; // Set `diff` timestamp\n\n      var curr = Number(new Date());\n      var ms = curr - (prevTime || curr);\n      self.diff = ms;\n      self.prev = prevTime;\n      self.curr = curr;\n      prevTime = curr;\n      args[0] = createDebug.coerce(args[0]);\n\n      if (typeof args[0] !== 'string') {\n        // Anything else let's inspect with %O\n        args.unshift('%O');\n      } // Apply any `formatters` transformations\n\n\n      var index = 0;\n      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n        // If we encounter an escaped % then don't increase the array index\n        if (match === '%%') {\n          return match;\n        }\n\n        index++;\n        var formatter = createDebug.formatters[format];\n\n        if (typeof formatter === 'function') {\n          var val = args[index];\n          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`\n\n          args.splice(index, 1);\n          index--;\n        }\n\n        return match;\n      }); // Apply env-specific formatting (colors, etc.)\n\n      createDebug.formatArgs.call(self, args);\n      var logFn = self.log || createDebug.log;\n      logFn.apply(self, args);\n    }\n\n    debug.namespace = namespace;\n    debug.enabled = createDebug.enabled(namespace);\n    debug.useColors = createDebug.useColors();\n    debug.color = selectColor(namespace);\n    debug.destroy = destroy;\n    debug.extend = extend; // Debug.formatArgs = formatArgs;\n    // debug.rawLog = rawLog;\n    // env-specific initialization logic for debug instances\n\n    if (typeof createDebug.init === 'function') {\n      createDebug.init(debug);\n    }\n\n    createDebug.instances.push(debug);\n    return debug;\n  }\n\n  function destroy() {\n    var index = createDebug.instances.indexOf(this);\n\n    if (index !== -1) {\n      createDebug.instances.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n  function extend(namespace, delimiter) {\n    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n  }\n  /**\n  * Enables a debug mode by namespaces. This can include modes\n  * separated by a colon and wildcards.\n  *\n  * @param {String} namespaces\n  * @api public\n  */\n\n\n  function enable(namespaces) {\n    createDebug.save(namespaces);\n    createDebug.names = [];\n    createDebug.skips = [];\n    var i;\n    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n    var len = split.length;\n\n    for (i = 0; i < len; i++) {\n      if (!split[i]) {\n        // ignore empty strings\n        continue;\n      }\n\n      namespaces = split[i].replace(/\\*/g, '.*?');\n\n      if (namespaces[0] === '-') {\n        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n      } else {\n        createDebug.names.push(new RegExp('^' + namespaces + '$'));\n      }\n    }\n\n    for (i = 0; i < createDebug.instances.length; i++) {\n      var instance = createDebug.instances[i];\n      instance.enabled = createDebug.enabled(instance.namespace);\n    }\n  }\n  /**\n  * Disable debug output.\n  *\n  * @api public\n  */\n\n\n  function disable() {\n    createDebug.enable('');\n  }\n  /**\n  * Returns true if the given mode name is enabled, false otherwise.\n  *\n  * @param {String} name\n  * @return {Boolean}\n  * @api public\n  */\n\n\n  function enabled(name) {\n    if (name[name.length - 1] === '*') {\n      return true;\n    }\n\n    var i;\n    var len;\n\n    for (i = 0, len = createDebug.skips.length; i < len; i++) {\n      if (createDebug.skips[i].test(name)) {\n        return false;\n      }\n    }\n\n    for (i = 0, len = createDebug.names.length; i < len; i++) {\n      if (createDebug.names[i].test(name)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n  * Coerce `val`.\n  *\n  * @param {Mixed} val\n  * @return {Mixed}\n  * @api private\n  */\n\n\n  function coerce(val) {\n    if (val instanceof Error) {\n      return val.stack || val.message;\n    }\n\n    return val;\n  }\n\n  createDebug.enable(createDebug.load());\n  return createDebug;\n}\n\nmodule.exports = setup;\n\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$ms$index","~$shadow.js"]],"~:properties",["^5",["humanize","selectColor","formatters","enable","enabled","diff","skips","destroy","prev","disable","debug","useColors","names","extend","curr","instances","namespace","color","default","coerce"]],"~:compiled-at",1574889105258,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$debug$src$common.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/debug/src/common.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$debug$src$common\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\n/**\\n * This is the common logic for both the Node.js and web browser\\n * implementations of `debug()`.\\n */\\nfunction setup(env) {\\n  createDebug.debug = createDebug;\\n  createDebug.default = createDebug;\\n  createDebug.coerce = coerce;\\n  createDebug.disable = disable;\\n  createDebug.enable = enable;\\n  createDebug.enabled = enabled;\\n  createDebug.humanize = require('ms');\\n  Object.keys(env).forEach(function (key) {\\n    createDebug[key] = env[key];\\n  });\\n  /**\\n  * Active `debug` instances.\\n  */\\n\\n  createDebug.instances = [];\\n  /**\\n  * The currently active debug mode names, and names to skip.\\n  */\\n\\n  createDebug.names = [];\\n  createDebug.skips = [];\\n  /**\\n  * Map of special \\\"%n\\\" handling functions, for the debug \\\"format\\\" argument.\\n  *\\n  * Valid key names are a single, lower or upper-case letter, i.e. \\\"n\\\" and \\\"N\\\".\\n  */\\n\\n  createDebug.formatters = {};\\n  /**\\n  * Selects a color for a debug namespace\\n  * @param {String} namespace The namespace string for the for the debug instance to be colored\\n  * @return {Number|String} An ANSI color code for the given namespace\\n  * @api private\\n  */\\n\\n  function selectColor(namespace) {\\n    var hash = 0;\\n\\n    for (var i = 0; i < namespace.length; i++) {\\n      hash = (hash << 5) - hash + namespace.charCodeAt(i);\\n      hash |= 0; // Convert to 32bit integer\\n    }\\n\\n    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\\n  }\\n\\n  createDebug.selectColor = selectColor;\\n  /**\\n  * Create a debugger with the given `namespace`.\\n  *\\n  * @param {String} namespace\\n  * @return {Function}\\n  * @api public\\n  */\\n\\n  function createDebug(namespace) {\\n    var prevTime;\\n\\n    function debug() {\\n      // Disabled?\\n      if (!debug.enabled) {\\n        return;\\n      }\\n\\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n        args[_key] = arguments[_key];\\n      }\\n\\n      var self = debug; // Set `diff` timestamp\\n\\n      var curr = Number(new Date());\\n      var ms = curr - (prevTime || curr);\\n      self.diff = ms;\\n      self.prev = prevTime;\\n      self.curr = curr;\\n      prevTime = curr;\\n      args[0] = createDebug.coerce(args[0]);\\n\\n      if (typeof args[0] !== 'string') {\\n        // Anything else let's inspect with %O\\n        args.unshift('%O');\\n      } // Apply any `formatters` transformations\\n\\n\\n      var index = 0;\\n      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\\n        // If we encounter an escaped % then don't increase the array index\\n        if (match === '%%') {\\n          return match;\\n        }\\n\\n        index++;\\n        var formatter = createDebug.formatters[format];\\n\\n        if (typeof formatter === 'function') {\\n          var val = args[index];\\n          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`\\n\\n          args.splice(index, 1);\\n          index--;\\n        }\\n\\n        return match;\\n      }); // Apply env-specific formatting (colors, etc.)\\n\\n      createDebug.formatArgs.call(self, args);\\n      var logFn = self.log || createDebug.log;\\n      logFn.apply(self, args);\\n    }\\n\\n    debug.namespace = namespace;\\n    debug.enabled = createDebug.enabled(namespace);\\n    debug.useColors = createDebug.useColors();\\n    debug.color = selectColor(namespace);\\n    debug.destroy = destroy;\\n    debug.extend = extend; // Debug.formatArgs = formatArgs;\\n    // debug.rawLog = rawLog;\\n    // env-specific initialization logic for debug instances\\n\\n    if (typeof createDebug.init === 'function') {\\n      createDebug.init(debug);\\n    }\\n\\n    createDebug.instances.push(debug);\\n    return debug;\\n  }\\n\\n  function destroy() {\\n    var index = createDebug.instances.indexOf(this);\\n\\n    if (index !== -1) {\\n      createDebug.instances.splice(index, 1);\\n      return true;\\n    }\\n\\n    return false;\\n  }\\n\\n  function extend(namespace, delimiter) {\\n    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\\n  }\\n  /**\\n  * Enables a debug mode by namespaces. This can include modes\\n  * separated by a colon and wildcards.\\n  *\\n  * @param {String} namespaces\\n  * @api public\\n  */\\n\\n\\n  function enable(namespaces) {\\n    createDebug.save(namespaces);\\n    createDebug.names = [];\\n    createDebug.skips = [];\\n    var i;\\n    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\\\s,]+/);\\n    var len = split.length;\\n\\n    for (i = 0; i < len; i++) {\\n      if (!split[i]) {\\n        // ignore empty strings\\n        continue;\\n      }\\n\\n      namespaces = split[i].replace(/\\\\*/g, '.*?');\\n\\n      if (namespaces[0] === '-') {\\n        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\\n      } else {\\n        createDebug.names.push(new RegExp('^' + namespaces + '$'));\\n      }\\n    }\\n\\n    for (i = 0; i < createDebug.instances.length; i++) {\\n      var instance = createDebug.instances[i];\\n      instance.enabled = createDebug.enabled(instance.namespace);\\n    }\\n  }\\n  /**\\n  * Disable debug output.\\n  *\\n  * @api public\\n  */\\n\\n\\n  function disable() {\\n    createDebug.enable('');\\n  }\\n  /**\\n  * Returns true if the given mode name is enabled, false otherwise.\\n  *\\n  * @param {String} name\\n  * @return {Boolean}\\n  * @api public\\n  */\\n\\n\\n  function enabled(name) {\\n    if (name[name.length - 1] === '*') {\\n      return true;\\n    }\\n\\n    var i;\\n    var len;\\n\\n    for (i = 0, len = createDebug.skips.length; i < len; i++) {\\n      if (createDebug.skips[i].test(name)) {\\n        return false;\\n      }\\n    }\\n\\n    for (i = 0, len = createDebug.names.length; i < len; i++) {\\n      if (createDebug.names[i].test(name)) {\\n        return true;\\n      }\\n    }\\n\\n    return false;\\n  }\\n  /**\\n  * Coerce `val`.\\n  *\\n  * @param {Mixed} val\\n  * @return {Mixed}\\n  * @api private\\n  */\\n\\n\\n  function coerce(val) {\\n    if (val instanceof Error) {\\n      return val.stack || val.message;\\n    }\\n\\n    return val;\\n  }\\n\\n  createDebug.enable(createDebug.load());\\n  return createDebug;\\n}\\n\\nmodule.exports = setup;\\n\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"setup\",\"env\",\"selectColor\",\"namespace\",\"hash\",\"i\",\"length\",\"charCodeAt\",\"createDebug\",\"colors\",\"Math\",\"abs\",\"debug\",\"enabled\",\"_len\",\"arguments\",\"args\",\"Array\",\"_key\",\"curr\",\"Number\",\"Date\",\"diff\",\"prevTime\",\"prev\",\"coerce\",\"unshift\",\"index\",\"replace\",\"match\",\"format\",\"formatter\",\"formatters\",\"call\",\"val\",\"splice\",\"formatArgs\",\"apply\",\"log\",\"useColors\",\"color\",\"destroy\",\"extend\",\"init\",\"instances\",\"push\",\"indexOf\",\"delimiter\",\"default\",\"Error\",\"stack\",\"message\",\"disable\",\"enable\",\"namespaces\",\"save\",\"names\",\"skips\",\"split\",\"len\",\"RegExp\",\"substr\",\"instance\",\"name\",\"test\",\"humanize\",\"Object\",\"keys\",\"forEach\",\"key\",\"load\"]\n}\n"]
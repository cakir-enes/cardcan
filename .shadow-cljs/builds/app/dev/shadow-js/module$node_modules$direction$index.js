["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/direction/index.js"],"~:js","shadow$provide.module$node_modules$direction$index=function(global,require,module,exports){var EXPRESSION_LEFT_TO_RIGHT=/^[^֑-߿יִ-﷽ﹰ-ﻼ]*[A-Za-zÀ-ÖØ-öø-ʸ̀-֐ࠀ-῿‎Ⰰ-﬜︀-﹯﻽-￿]/;var EXPRESSION_RIGHT_TO_LEFT=/^[^A-Za-zÀ-ÖØ-öø-ʸ̀-֐ࠀ-῿‎Ⰰ-﬜︀-﹯﻽-￿]*[֑-߿יִ-﷽ﹰ-ﻼ]/;module.exports=function(value){value=value.toString();return EXPRESSION_RIGHT_TO_LEFT.test(value)?\"rtl\":EXPRESSION_LEFT_TO_RIGHT.test(value)?\"ltr\":\"neutral\"}}","~:source","shadow$provide[\"module$node_modules$direction$index\"] = function(global,require,module,exports) {\n'use strict';\n\nvar GROUP_LEFT_TO_RIGHT,\n    GROUP_RIGHT_TO_LEFT,\n    EXPRESSION_LEFT_TO_RIGHT,\n    EXPRESSION_RIGHT_TO_LEFT;\n\n/*\n * Character ranges of left-to-right characters.\n */\n\nGROUP_LEFT_TO_RIGHT = 'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6' +\n    '\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u200E\\u2C00-\\uFB1C' +\n    '\\uFE00-\\uFE6F\\uFEFD-\\uFFFF';\n\n/*\n * Character ranges of right-to-left characters.\n */\n\nGROUP_RIGHT_TO_LEFT = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC';\n\n/*\n * Expression to match a left-to-right string.\n *\n * Matches the start of a string, followed by zero or\n * more non-right-to-left characters, followed by a\n * left-to-right character.\n */\n\nEXPRESSION_LEFT_TO_RIGHT = new RegExp(\n    '^[^' + GROUP_RIGHT_TO_LEFT + ']*[' + GROUP_LEFT_TO_RIGHT + ']'\n);\n\n/*\n * Expression to match a right-to-left string.\n *\n * Matches the start of a string, followed by zero or\n * more non-left-to-right characters, followed by a\n * right-to-left character.\n */\n\nEXPRESSION_RIGHT_TO_LEFT = new RegExp(\n    '^[^' + GROUP_LEFT_TO_RIGHT + ']*[' + GROUP_RIGHT_TO_LEFT + ']'\n);\n\n/**\n * Detect the direction of text.\n *\n * @param {string} value - value to stringify and check.\n * @return {string} - One of `\"rtl\"`, `\"ltr\"`, or\n *   `\"neutral\"`.\n */\nfunction direction(value) {\n    value = value.toString();\n\n    if (EXPRESSION_RIGHT_TO_LEFT.test(value)) {\n        return 'rtl';\n    }\n\n    if (EXPRESSION_LEFT_TO_RIGHT.test(value)) {\n        return 'ltr';\n    }\n\n    return 'neutral';\n}\n\n/*\n * Expose `direction`.\n */\n\nmodule.exports = direction;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1574889105291,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$direction$index.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,oCAAA,CAAwD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA8BhG,IAAAC,yBAA2B,iDAY3B,KAAAC,yBAA2B,iDA6B3BH,OAAAC,QAAA,CAlBAG,QAAkB,CAACC,KAAD,CAAQ,CACtBA,KAAA,CAAQA,KAAAC,SAAA,EAER,OAAIH,yBAAAI,KAAA,CAA8BF,KAA9B,CAAJ,CACW,KADX,CAIIH,wBAAAK,KAAA,CAA8BF,KAA9B,CAAJ,CACW,KADX,CAIO,SAXe,CArDsE;\",\n\"sources\":[\"node_modules/direction/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$direction$index\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nvar GROUP_LEFT_TO_RIGHT,\\n    GROUP_RIGHT_TO_LEFT,\\n    EXPRESSION_LEFT_TO_RIGHT,\\n    EXPRESSION_RIGHT_TO_LEFT;\\n\\n/*\\n * Character ranges of left-to-right characters.\\n */\\n\\nGROUP_LEFT_TO_RIGHT = 'A-Za-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6' +\\n    '\\\\u00F8-\\\\u02B8\\\\u0300-\\\\u0590\\\\u0800-\\\\u1FFF\\\\u200E\\\\u2C00-\\\\uFB1C' +\\n    '\\\\uFE00-\\\\uFE6F\\\\uFEFD-\\\\uFFFF';\\n\\n/*\\n * Character ranges of right-to-left characters.\\n */\\n\\nGROUP_RIGHT_TO_LEFT = '\\\\u0591-\\\\u07FF\\\\uFB1D-\\\\uFDFD\\\\uFE70-\\\\uFEFC';\\n\\n/*\\n * Expression to match a left-to-right string.\\n *\\n * Matches the start of a string, followed by zero or\\n * more non-right-to-left characters, followed by a\\n * left-to-right character.\\n */\\n\\nEXPRESSION_LEFT_TO_RIGHT = new RegExp(\\n    '^[^' + GROUP_RIGHT_TO_LEFT + ']*[' + GROUP_LEFT_TO_RIGHT + ']'\\n);\\n\\n/*\\n * Expression to match a right-to-left string.\\n *\\n * Matches the start of a string, followed by zero or\\n * more non-left-to-right characters, followed by a\\n * right-to-left character.\\n */\\n\\nEXPRESSION_RIGHT_TO_LEFT = new RegExp(\\n    '^[^' + GROUP_LEFT_TO_RIGHT + ']*[' + GROUP_RIGHT_TO_LEFT + ']'\\n);\\n\\n/**\\n * Detect the direction of text.\\n *\\n * @param {string} value - value to stringify and check.\\n * @return {string} - One of `\\\"rtl\\\"`, `\\\"ltr\\\"`, or\\n *   `\\\"neutral\\\"`.\\n */\\nfunction direction(value) {\\n    value = value.toString();\\n\\n    if (EXPRESSION_RIGHT_TO_LEFT.test(value)) {\\n        return 'rtl';\\n    }\\n\\n    if (EXPRESSION_LEFT_TO_RIGHT.test(value)) {\\n        return 'ltr';\\n    }\\n\\n    return 'neutral';\\n}\\n\\n/*\\n * Expose `direction`.\\n */\\n\\nmodule.exports = direction;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"EXPRESSION_LEFT_TO_RIGHT\",\"EXPRESSION_RIGHT_TO_LEFT\",\"direction\",\"value\",\"toString\",\"test\"]\n}\n"]
["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/slate-prop-types/lib/slate-prop-types.js"],"~:js","shadow$provide.module$node_modules$slate_prop_types$lib$slate_prop_types=function(global,require,module,exports){function create(name,validate){function check(isRequired,props,propName,componentName,location){props=props[propName];return null!=props||isRequired?null==props&&isRequired?Error(\"The \"+location+\" `\"+propName+\"` is marked as required in `\"+componentName+\"`, but it was not supplied.\"):validate(props)?null:Error(\"Invalid \"+location+\" `\"+propName+\"` supplied to `\"+componentName+\"`, expected a Slate `\"+\nname+\"` but received: \"+props):null}function propType(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return check.apply(void 0,[!1].concat(args))}propType.isRequired=function(){for(var _len2=arguments.length,args=Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];return check.apply(void 0,[!0].concat(args))};return propType}Object.defineProperty(exports,\"__esModule\",{value:!0});var slate=require(\"module$node_modules$slate$lib$slate\");\nglobal={block:create(\"Block\",function(v){return slate.Block.isBlock(v)}),blocks:create(\"List\\x3cBlock\\x3e\",function(v){return slate.Block.isBlockList(v)}),change:create(\"Change\",function(v){return slate.Change.isChange(v)}),data:create(\"Data\",function(v){return slate.Data.isData(v)}),document:create(\"Document\",function(v){return slate.Document.isDocument(v)}),inline:create(\"Inline\",function(v){return slate.Inline.isInline(v)}),inlines:create(\"Inline\",function(v){return slate.Inline.isInlineList(v)}),\nleaf:create(\"Leaf\",function(v){return slate.Leaf.isLeaf(v)}),leaves:create(\"List\\x3cLeaf\\x3e\",function(v){return slate.Leaf.isLeafList(v)}),mark:create(\"Mark\",function(v){return slate.Mark.isMark(v)}),marks:create(\"Set\\x3cMark\\x3e\",function(v){return slate.Mark.isMarkSet(v)}),node:create(\"Node\",function(v){return slate.Node.isNode(v)}),nodes:create(\"List\\x3cNode\\x3e\",function(v){return slate.Node.isNodeList(v)}),range:create(\"Range\",function(v){return slate.Range.isRange(v)}),ranges:create(\"List\\x3cRange\\x3e\",\nfunction(v){return slate.Range.isRangeList(v)}),selection:create(\"Selection\",function(v){return slate.Selection.isSelection(v)}),value:create(\"Value\",function(v){return slate.Value.isValue(v)}),text:create(\"Text\",function(v){return slate.Text.isText(v)}),texts:create(\"List\\x3cText\\x3e\",function(v){return slate.Text.isTextList(v)})};exports.default=global}","~:source","shadow$provide[\"module$node_modules$slate_prop_types$lib$slate_prop_types\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar slate = require('slate');\n\n/**\n * Create a prop type checker for Slate objects with `name` and `validate`.\n *\n * @param {String} name\n * @param {Function} validate\n * @return {Function}\n */\n\nfunction create(name, validate) {\n  function check(isRequired, props, propName, componentName, location) {\n    var value = props[propName];\n\n    if (value == null && !isRequired) {\n      return null;\n    }\n\n    if (value == null && isRequired) {\n      return new Error('The ' + location + ' `' + propName + '` is marked as required in `' + componentName + '`, but it was not supplied.');\n    }\n\n    if (validate(value)) {\n      return null;\n    }\n\n    return new Error('Invalid ' + location + ' `' + propName + '` supplied to `' + componentName + '`, expected a Slate `' + name + '` but received: ' + value);\n  }\n\n  function propType() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return check.apply(undefined, [false].concat(args));\n  }\n\n  propType.isRequired = function () {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return check.apply(undefined, [true].concat(args));\n  };\n\n  return propType;\n}\n\n/**\n * Prop type checkers.\n *\n * @type {Object}\n */\n\nvar Types = {\n  block: create('Block', function (v) {\n    return slate.Block.isBlock(v);\n  }),\n  blocks: create('List<Block>', function (v) {\n    return slate.Block.isBlockList(v);\n  }),\n  change: create('Change', function (v) {\n    return slate.Change.isChange(v);\n  }),\n  data: create('Data', function (v) {\n    return slate.Data.isData(v);\n  }),\n  document: create('Document', function (v) {\n    return slate.Document.isDocument(v);\n  }),\n  inline: create('Inline', function (v) {\n    return slate.Inline.isInline(v);\n  }),\n  inlines: create('Inline', function (v) {\n    return slate.Inline.isInlineList(v);\n  }),\n  leaf: create('Leaf', function (v) {\n    return slate.Leaf.isLeaf(v);\n  }),\n  leaves: create('List<Leaf>', function (v) {\n    return slate.Leaf.isLeafList(v);\n  }),\n  mark: create('Mark', function (v) {\n    return slate.Mark.isMark(v);\n  }),\n  marks: create('Set<Mark>', function (v) {\n    return slate.Mark.isMarkSet(v);\n  }),\n  node: create('Node', function (v) {\n    return slate.Node.isNode(v);\n  }),\n  nodes: create('List<Node>', function (v) {\n    return slate.Node.isNodeList(v);\n  }),\n  range: create('Range', function (v) {\n    return slate.Range.isRange(v);\n  }),\n  ranges: create('List<Range>', function (v) {\n    return slate.Range.isRangeList(v);\n  }),\n  selection: create('Selection', function (v) {\n    return slate.Selection.isSelection(v);\n  }),\n  value: create('Value', function (v) {\n    return slate.Value.isValue(v);\n  }),\n  text: create('Text', function (v) {\n    return slate.Text.isText(v);\n  }),\n  texts: create('List<Text>', function (v) {\n    return slate.Text.isTextList(v);\n  })\n\n  /**\n   * Export.\n   *\n   * @type {Object}\n   */\n\n};\n\nexports.default = Types;\n//# sourceMappingURL=slate-prop-types.js.map\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$slate$lib$slate"]],"~:properties",["^5",["range","inlines","inline","__esModule","leaves","block","marks","texts","document","blocks","value","leaf","text","nodes","ranges","selection","mark","data","default","node","change","isRequired"]],"~:compiled-at",1574889105347,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$slate_prop_types$lib$slate_prop_types.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/slate-prop-types/lib/slate-prop-types.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$slate_prop_types$lib$slate_prop_types\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nvar slate = require('slate');\\n\\n/**\\n * Create a prop type checker for Slate objects with `name` and `validate`.\\n *\\n * @param {String} name\\n * @param {Function} validate\\n * @return {Function}\\n */\\n\\nfunction create(name, validate) {\\n  function check(isRequired, props, propName, componentName, location) {\\n    var value = props[propName];\\n\\n    if (value == null && !isRequired) {\\n      return null;\\n    }\\n\\n    if (value == null && isRequired) {\\n      return new Error('The ' + location + ' `' + propName + '` is marked as required in `' + componentName + '`, but it was not supplied.');\\n    }\\n\\n    if (validate(value)) {\\n      return null;\\n    }\\n\\n    return new Error('Invalid ' + location + ' `' + propName + '` supplied to `' + componentName + '`, expected a Slate `' + name + '` but received: ' + value);\\n  }\\n\\n  function propType() {\\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    return check.apply(undefined, [false].concat(args));\\n  }\\n\\n  propType.isRequired = function () {\\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\\n      args[_key2] = arguments[_key2];\\n    }\\n\\n    return check.apply(undefined, [true].concat(args));\\n  };\\n\\n  return propType;\\n}\\n\\n/**\\n * Prop type checkers.\\n *\\n * @type {Object}\\n */\\n\\nvar Types = {\\n  block: create('Block', function (v) {\\n    return slate.Block.isBlock(v);\\n  }),\\n  blocks: create('List<Block>', function (v) {\\n    return slate.Block.isBlockList(v);\\n  }),\\n  change: create('Change', function (v) {\\n    return slate.Change.isChange(v);\\n  }),\\n  data: create('Data', function (v) {\\n    return slate.Data.isData(v);\\n  }),\\n  document: create('Document', function (v) {\\n    return slate.Document.isDocument(v);\\n  }),\\n  inline: create('Inline', function (v) {\\n    return slate.Inline.isInline(v);\\n  }),\\n  inlines: create('Inline', function (v) {\\n    return slate.Inline.isInlineList(v);\\n  }),\\n  leaf: create('Leaf', function (v) {\\n    return slate.Leaf.isLeaf(v);\\n  }),\\n  leaves: create('List<Leaf>', function (v) {\\n    return slate.Leaf.isLeafList(v);\\n  }),\\n  mark: create('Mark', function (v) {\\n    return slate.Mark.isMark(v);\\n  }),\\n  marks: create('Set<Mark>', function (v) {\\n    return slate.Mark.isMarkSet(v);\\n  }),\\n  node: create('Node', function (v) {\\n    return slate.Node.isNode(v);\\n  }),\\n  nodes: create('List<Node>', function (v) {\\n    return slate.Node.isNodeList(v);\\n  }),\\n  range: create('Range', function (v) {\\n    return slate.Range.isRange(v);\\n  }),\\n  ranges: create('List<Range>', function (v) {\\n    return slate.Range.isRangeList(v);\\n  }),\\n  selection: create('Selection', function (v) {\\n    return slate.Selection.isSelection(v);\\n  }),\\n  value: create('Value', function (v) {\\n    return slate.Value.isValue(v);\\n  }),\\n  text: create('Text', function (v) {\\n    return slate.Text.isText(v);\\n  }),\\n  texts: create('List<Text>', function (v) {\\n    return slate.Text.isTextList(v);\\n  })\\n\\n  /**\\n   * Export.\\n   *\\n   * @type {Object}\\n   */\\n\\n};\\n\\nexports.default = Types;\\n//# sourceMappingURL=slate-prop-types.js.map\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"create\",\"name\",\"validate\",\"check\",\"isRequired\",\"props\",\"propName\",\"componentName\",\"location\",\"value\",\"Error\",\"propType\",\"_len\",\"arguments\",\"length\",\"args\",\"Array\",\"_key\",\"apply\",\"undefined\",\"concat\",\"propType.isRequired\",\"_len2\",\"_key2\",\"Object\",\"defineProperty\",\"slate\",\"Types\",\"block\",\"v\",\"Block\",\"isBlock\",\"blocks\",\"isBlockList\",\"change\",\"Change\",\"isChange\",\"data\",\"Data\",\"isData\",\"document\",\"Document\",\"isDocument\",\"inline\",\"Inline\",\"isInline\",\"inlines\",\"isInlineList\",\"leaf\",\"Leaf\",\"isLeaf\",\"leaves\",\"isLeafList\",\"mark\",\"Mark\",\"isMark\",\"marks\",\"isMarkSet\",\"node\",\"Node\",\"isNode\",\"nodes\",\"isNodeList\",\"range\",\"Range\",\"isRange\",\"ranges\",\"isRangeList\",\"selection\",\"Selection\",\"isSelection\",\"Value\",\"isValue\",\"text\",\"Text\",\"isText\",\"texts\",\"isTextList\",\"default\"]\n}\n"]